#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 1
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yynoreturn yy_fatal_error (yyconst char* msg ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 171
#define YY_END_OF_BUFFER 172
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1202] =
    {   0,
        0,    0,  168,  168,    2,    2,  172,  170,    4,    4,
      170,  170,  159,  166,  159,  159,  163,  159,  159,  159,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  159,  168,  169,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  154,    0,    1,    0,
      161,  160,  163,  156,  155,  153,  157,  165,  165,  165,

      165,  165,  165,  124,  165,  125,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      126,  165,  165,  127,  128,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  129,  130,  131,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  132,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  158,  168,  167,
        2,    2,    2,    2,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  164,    0,  160,  112,  165,  113,
      165,  165,  114,  165,  115,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  136,  165,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  116,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  117,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  118,  165,  165,  119,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  120,  165,  165,
      121,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  122,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  123,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    0,  165,  165,  165,  165,  165,
      165,  165,   83,  165,   84,   45,   85,  165,  165,  165,
       86,  165,  165,  165,   87,  142,  165,  165,  165,  165,
      165,   89,  165,  165,  165,   90,   91,  165,  165,  165,
      165,  165,  165,  165,   92,  165,  165,   93,   94,  165,
      165,   95,  165,   96,  135,  165,  165,  165,  165,  165,
      165,   97,  165,   98,   99,  100,  165,  102,  165,  103,
      165,  165,  165,  165,  104,  165,  165,  165,  165,  165,
      105,  165,  165,   32,  165,  165,  165,  165,  165,  165,
      165,  106,  165,  165,  165,  165,  165,  107,  108,   30,

      165,  145,  165,  165,  165,  165,  165,  165,  165,  165,
      109,  165,  110,  165,  111,  138,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,   63,
       64,  165,   65,  165,  148,  165,  165,  165,  165,  165,
      165,  165,   66,  165,  165,  165,  165,  165,  165,   67,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      146,   68,  165,  165,   69,  165,  141,  101,  165,   70,
       71,  165,  165,  165,  165,   72,   73,   74,   75,  165,
      137,  165,  165,  165,   76,   77,  165,  165,  165,  165,
      165,   78,  165,  165,  165,  165,  165,  165,  165,   79,

      165,  165,  165,  165,   80,  165,  165,  165,   81,  165,
      165,  165,   82,  144,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        0,  165,   35,  165,  165,  165,   36,  150,  165,   37,
      165,  165,  165,  165,  165,   38,  165,   39,  165,   40,
       41,   42,  165,   43,  165,  165,   46,   47,   48,   49,
       50,  165,  165,  165,   51,  134,  143,  165,  165,   52,
      165,  165,  165,   53,  165,  165,   55,  133,   56,  165,
       57,  165,   58,  165,  165,  165,  165,   59,   60,   61,
       62,  165,  165,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,   15,   16,   17,
      165,   18,   19,  165,  165,  165,   31,   20,  165,  165,
       21,   22,   44,   23,  165,  165,  140,   24,  165,  165,
       25,   26,  165,  165,   27,  139,  165,   28,  165,  165,
      165,  165,   29,   34,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    0,  165,   54,   88,  165,   10,   11,  165,
      151,   12,  165,   13,  149,   33,  165,  165,  165,   14,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,  165,
      165,    7,  165,    8,    9,  165,    2,    2,    2,    2,
        2,    2,    2,    2,    0,    0,    5,    6,  165,    2,
        2,    2,    2,    2,    0,    0,  147,    2,    2,    2,
        0,    0,    2,    2,    0,    0,    2,    2,    0,    0,
        2,    2,    0,    0,    2,    2,    0,    0,    2,    2,
        0,  152,    2,    2,    0,    2,    0,    2,  162,    2,

        0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,    6,    6,   20,
       21,   22,    6,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        6,    1,    6,    6,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    6,   76,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static yyconst flex_uint16_t yy_base[1209] =
    {   0,
        0,    0,  582,  581,   76,    0,  581, 4799,  151,  153,
      552,    0, 4799, 4799,  149,  148,  160,  159,  547,  535,
      156,  156,  164,  162,  172,  223,  198,  211,  215,  151,
      168,  210,  255,  257,  263,  262,    0,  277,  317,  360,
      296,  221,  258,  171,  477,    0,  545,    0,  295,  308,
      516,  531,    0,    0,  317,  418,  429,  317,  500,  499,
      448,  524,  578,  630,  678,  730,  338,  436,  778,  330,
      319,  349,  444,  830,  878,  500,  321,  511,  928,  980,
      556,  512,  533,  431,  441,  347, 4799,  508, 4799,  500,
     1045, 1055, 1066, 4799, 4799, 4799, 4799,    0,  174,  253,

      438,  469,  284,  318,  567,    0,  538,  339,  578,  361,
      591,  621,  607,  417,  429,  436,  453,  489,  641,  515,
      521,  520,  537,  556,  568,  590,  594,  659,  601,  608,
        0,  628,  625,  675,  633,  650,  644,  674,  674,  697,
      673,  679,  685,  681,  689,  701,  722,  726,    0,  729,
      714,  719,  740,  738,  766,  737,  734,  741,  776,  739,
      776,  768,  786,  787,  785,  788,  782,  783,  800,  793,
      796,  824,  822,  832,  833,  819,  840, 4799,    0, 4799,
        0,  399,    0,  492,    0,  484, 1076, 1086, 1097,    0,
        0,    0,    0,  838,  849,  866,  882,  923,  890,  934,

      967,  868,  971, 1094, 1142,  952,  977, 1194, 1091, 1092,
     1093, 1096, 1107, 1146, 1244, 1152, 1184, 1196, 1185, 1200,
     1229, 1230, 1252, 1270, 1265, 1278,  880, 1296, 1136, 1345,
     1293, 1304, 1128, 1306, 1322, 1341, 1226, 1347, 1370, 1268,
     1358, 1375, 1384, 1398, 1234, 1413, 1401, 1410, 1424, 1415,
     1456, 1434, 1466, 1455, 1489, 1464, 1498, 1495, 1510, 1520,
     1519, 1528, 1541, 1532, 1562, 1573, 1564, 1583, 1595, 1586,
     1574, 1597, 1596,    0, 4799,  453, 1662,    0,  837,    0,
      844,  877,    0,  924,    0,  923,  970,  968,  981, 1640,
     1082, 1081, 1090, 1084, 1082, 1164, 1147, 1636, 1156, 1175,

     1220, 1313, 1641, 1321, 1362, 1361, 1417, 1421, 1453,    0,
     1476, 1478, 1509, 1510, 1519, 1516, 1557, 1631, 1638, 1629,
     1649, 1653, 1665, 1650, 1666, 1666, 1656, 1659, 1667, 1664,
     1675, 1676, 1677, 1678, 1663, 1671,    0, 1666, 1685, 1682,
     1691, 1695, 1690, 1692, 1679, 1694, 1694,    0, 1704, 1701,
     1702, 1720, 1723, 1728, 1716, 1715, 1719, 1721, 1733, 1715,
     1728, 1725, 1733, 1724, 1735,    0, 1721, 1733, 1727, 1729,
     1738, 1735, 1733, 1740, 1763,    0, 1755, 1765, 1758, 1767,
     1782, 1770, 1764, 1783, 1764, 1768, 1775, 1782, 1773,    0,
      452, 1833, 1814, 1826, 1827, 1828, 1829, 1830, 1839, 1831,

     1860, 1864, 1865, 1881, 1898, 1889, 1904, 1906, 1852, 1917,
     1934, 1932, 1942, 1956, 1948, 1967, 1984, 1985, 1988, 1972,
     2001, 2009, 2026, 2018, 2020, 2034, 2022, 2052, 2060, 2051,
     2055, 2070, 2039, 2092, 2083, 2096, 2093, 2108, 2106, 2121,
     2125, 2142, 2134, 2138, 2150, 2146, 2159, 2163, 2178, 2175,
     2192, 2176, 2194, 2180, 2204, 2217, 2230, 2232, 2238, 2229,
     2248, 2246, 2254, 2271, 2283, 2280, 2282, 2284, 2292, 2297,
     2314, 2308, 2338, 2326, 2336, 2337, 2359, 2342, 2350, 2348,
     2354, 2376, 2391, 2390, 2392, 2402, 2388, 2413, 2441, 2400,
     2404, 2443, 2444, 2446, 2462, 2478, 2467, 2484, 2497, 2492,

     2506, 2523, 2515, 2534,  449, 1829, 1831, 1880, 1902, 1926,
     1941, 1963,    0, 2000,    0,    0, 2021, 2054, 2105, 2124,
        0, 2205, 2219, 2245, 2271,    0, 2313, 2422, 2426, 2433,
     2458, 2446, 2504, 2509, 2521,    0,    0, 2519, 2527, 2525,
     2531, 2553, 2555, 2552,    0, 2541, 2562,    0,    0, 2564,
     2553,    0, 2557,    0, 2553, 2569, 2558, 2553, 2562, 2564,
     2582,    0, 2573,    0,    0,    0, 2567,    0, 2579,    0,
     2588, 2575, 2589, 2584,    0, 2602, 2601, 2590, 2592, 2598,
        0, 2612, 2614,    0, 2604, 2601, 2603, 2623, 2613, 2614,
     2627,    0, 2619, 2629, 2627, 2634, 2626,    0,    0, 2624,

     2626,    0, 2644, 2634, 2628, 2650, 2634, 2649, 2654, 2652,
        0, 2641,    0, 2659,    0, 2646,  448, 2672, 2675, 2674,
     2677, 2680, 2689, 2683, 2691, 2717, 2706, 2708, 2743, 2734,
     2745, 2747, 2731, 2762, 2732, 2771, 2785, 2783, 2786, 2788,
     2801, 2799, 2811, 2816, 2839, 2845, 2840, 2842, 2850, 2868,
     2871, 2880, 2884, 2885, 2894, 2883, 2893, 2919, 2928, 2902,
     2916, 2937, 2942, 2925, 2938, 2950, 2959, 2956, 2968, 2971,
     2992, 2994, 3009, 2993, 3023, 3004, 3025, 3026, 3027, 3028,
     3058, 3044, 3059, 3062, 3060, 3068, 3093, 3096, 3097, 3098,
     3099, 3102, 3114, 3131, 3132, 3130, 3148, 3147, 3165, 3166,

     3162, 3164, 3198, 3181, 3199, 3202, 3210, 3204, 3232, 3216,
     3220, 3234, 3244, 3235, 3268, 3256, 3270, 3278, 3284, 3287,
     3253, 3309, 3308, 3321, 3318, 3320, 3322, 3330,  438,    0,
        0, 2675,    0, 2714,    0, 2729, 2749, 2759, 2788, 2810,
     2841, 3010,    0, 3146, 3172, 3178, 3254, 3289, 3306,    0,
     3315, 3309, 3318, 3332, 3343, 3337, 3338, 3344, 3356, 3363,
        0,    0, 3347, 3356,    0, 3364,    0,    0, 3357,    0,
        0, 3358, 3374, 3361, 3369,    0,    0,    0,    0, 3381,
     3368, 3387, 3381, 3371,    0,    0, 3391, 3379, 3381, 3395,
     3392,    0, 3401, 3402, 3405, 3391, 3403, 3413, 3418, 3401,

     3403, 3402, 3424, 3430,    0, 3427, 3429, 3429,    0, 3416,
     3436, 3439,    0,    0,  413, 3438, 3440, 3448, 3446, 3450,
     3451, 3452, 3464, 3482, 3474, 3461, 3504, 3486, 3492, 3520,
     3518, 3505, 3530, 3528, 3517, 3534, 3556, 3558, 3559, 3569,
     3570, 3584, 3592, 3574, 3598, 3610, 3593, 3622, 3623, 3641,
     3624, 3652, 3633, 3636, 3647, 3646, 3658, 3676, 3677, 3692,
     3695, 3687, 3690, 3700, 3701, 3711, 3726, 3745, 3732, 3749,
     3730, 3743, 3751, 3761, 3780, 3755, 3783, 3784, 3789, 3799,
     3818, 3813, 3821, 3843, 3839, 3837, 3834, 3856, 3877, 3879,
     3867, 3885, 3889, 3891, 3893, 3907, 3923, 3929, 3908, 3910,

      405, 3500,    0, 3527, 3582, 3613, 3618,    0, 3679,    0,
     3684, 3789, 3807, 3816, 3838,    0, 3898,    0, 3919,    0,
        0,    0, 3931,    0, 3924, 3924,    0,    0,    0,    0,
        0, 3928, 3942, 3949,    0, 3933,    0, 3944, 3957,    0,
     3944, 3961, 3942,    0, 3965, 3966, 3951, 3953,    0, 3962,
        0, 3966,    0, 3979, 3981, 3981, 3966,    0,    0,    0,
        0, 3969, 3976,  404, 3985, 3987, 4011, 3995, 4001, 3999,
     3997, 4029, 4003, 4025, 4033, 4037, 4054, 4055, 4051, 4086,
     4065, 4069, 4073, 4087, 4091, 4095, 4099, 4108, 4109, 4103,
     4105, 4121, 4127, 4137, 4140, 4139, 4149, 4143, 4161, 4158,

     4191, 4177, 4162, 4179, 4183, 4192, 4193, 4216, 4217, 4231,
     4232, 4207, 4247, 4228, 4250, 4233, 4265, 4266, 4271, 4287,
     4281, 4290, 4295, 4299, 4303, 4304,  408,    0,    0,    0,
     4077,    0,    0, 4195, 4249, 4286,    0,    0, 4300, 4290,
        0,    0,    0,    0, 4308, 4313,    0,    0, 4308, 4325,
        0,    0, 4320, 4330,    0,    0, 4324,    0, 4327, 4333,
     4329, 4345,    0,    0,  407, 4349, 4353, 4354, 4355, 4357,
     4358, 4359, 4370, 4387, 4388, 4389, 4391, 4412, 4393, 4399,
     4403, 4421, 4424, 4445, 4433, 4437, 4442, 4443, 4447, 4456,
     4458, 4475, 4466, 4477, 4491, 4487, 4496, 4512, 4510, 4499,

     4501, 4515,  406, 4352,    0,    0, 4383,    0,    0, 4446,
        0,    0, 4504,    0,    0,    0, 4507, 4518, 4527,    0,
      401, 4540, 4541, 4545, 4549, 4550, 4551, 4566, 4555, 4563,
     4594, 4579, 4584, 4585, 4589, 4617, 4615, 4600,  393,  406,
     4574,    0, 4581,    0,    0, 4593,  350, 4648, 4618, 4629,
     4639, 4640, 4643, 4651,  344, 4682,    0,    0, 4616,  342,
     4697, 4654, 4669, 4682,  338, 4654,    0,  335, 4683, 4683,
      330, 4671,  325, 4672,  306, 4672,  303, 4673,  288, 4690,
      255, 4693,  250, 4691,  245, 4695,  243, 4703,  240, 4705,
      235, 4799,  221,    0,  226,  197,  187,  173, 4799,    0,

     4799, 4768, 4773,  181, 4778, 4783, 4788, 4793
    } ;

static yyconst flex_int16_t yy_def[1209] =
    {   0,
     1201,    1, 1202, 1202, 1201,    5, 1201, 1201, 1201, 1201,
     1201, 1203, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1201, 1205, 1201, 1206, 1206, 1201,
     1206, 1207, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1208, 1208,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1206, 1201, 1201, 1203, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1204, 1204, 1204,

     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1201, 1205, 1201,
     1206, 1206, 1206, 1207, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62, 1206, 1201, 1201, 1201, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,

     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1206,
     1206, 1206,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62, 1201, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,

     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1206,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1201, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,

     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1206,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

     1201, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1206,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1201, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1206,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62, 1201, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1206,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1201, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1206,   62,   62,   62,
       62,   62,   62,   62, 1201, 1201, 1204, 1204, 1204, 1206,
     1206,   62,   62,   62, 1201, 1201, 1204, 1206, 1206,   62,
     1201, 1201, 1206, 1206, 1201, 1201, 1206, 1206, 1201, 1201,
     1206, 1206, 1201, 1201, 1206, 1206, 1201, 1201, 1206, 1206,
     1201, 1201, 1206, 1206, 1201, 1206, 1201, 1206, 1201, 1206,

        0, 1201, 1201, 1201, 1201, 1201, 1201, 1201
    } ;

static yyconst flex_uint16_t yy_nxt[4876] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   37,   44,   37,    8,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   37,   44,   37,   45,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   58,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   77,   84,   77,   48,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   77,   84,
       77,   85,   86,   86,   86,   86,   89,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   90,   92,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   94,
       95,   99,  105,  100,  111,   98,  107,  136,  112,  101,
     1200,  102,  113,  108,  137,  103,  104,  177,  114,  278,

      109,  115,  106,  110, 1199,  116, 1198,  117,   99,  105,
      100,  111,  118,  107,  136,  112,  101,  119,  102,  113,
      108,  137,  103,  104,  177,  114,  278,  109,  115,  106,
      110,  126,  116,  128,  117, 1197,  138,  127, 1196,  118,
      139,  129,  131,  173,  119,  120,  140,  130,  132,  133,
      134,  174, 1195,  121, 1193,  135,  122, 1191,  126,  123,
      128, 1189,  124,  138,  127,  125, 1187,  139,  129,  131,
      173, 1185,  120,  140,  130,  132,  133,  134,  174,  144,
      121,  141,  135,  122,  152,  142,  123,  175,  176,  124,
      148,  143,  125,  145,  279,  153,  182,   86,  149,  146,

      147,  154,  150,  155, 1183,  151,  144,  156,  141,   86,
       86,  152,  142,  157,  175,  176, 1181,  148,  143, 1179,
      145,  279,  153,  284,  185,  149,  146,  147,  154,  150,
      155,  170,  151,  171,  156,  186,  172,  190,  191, 1177,
      157,  158,  285,  159, 1175,  233,  160,  194,   86,   86,
      284,  161, 1173,  162,  163, 1171,  194, 1168,  170, 1165,
      171,  291, 1160,  172,  194,  194,  232,  194,  158,  285,
      159,  222,  233,  160,  194,  234,  194,  223,  161,  235,
      162,  163,  164,  194,  194,  236,  165,  296,  291,  166,
      167,  194,  194,  232,  194,  194,  168,  297,  222,  169,

      182,   86,  234,  194,  223, 1155,  235, 1156, 1156,  164,
     1147,  194,  236,  165,  296, 1139,  166,  167, 1121, 1103,
     1065, 1027,  194,  168,  297,  964,  169,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  188,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  181,  181,
      901,  181,  181,  181,  181,  181,  181,  273,  224,  307,
      815,  729,  194,  617,  505,  308,  225,  181,  181,  181,
      237,  280,  226,  195,  238,  196,  309,  194,  310,  281,
      239,  197,  194,  198,  273,  224,  307,  199,  200,  194,
      194,  282,  308,  225,  283,  391,  390,  237,  280,  226,

      195,  238,  196,  309,  194,  310,  281,  239,  197,  194,
      198,  276,  275,  311,  199,  200,  274,  194,  282,  193,
      192,  283,  248,  181,  181,  181,  194,  181,  181,  181,
      181,  181,  181,  249,  269,  181,  183,  251,  194,  250,
      311,  252,  270,  181,  181,  181,  194,  253,  317,  248,
      201,  180,  178,  194,  318,   97,  319,  194,  194,  194,
      249,  269,  271,  272,  251,  194,  250,   96,  252,  270,
      202,  289,   87,  194,  253,  317,  320,  201,  290,  194,
     1201,  318,  194,  319,  194,  194,  194,   47,   47,  271,
      272,  266,  321,  267,  286,  287,  268,  202,  289,  181,

      203,  322,  194,  320,  194,  290,  194,  204,  288,  194,
     1201,  292,  293,  294,  205,  295, 1201,  206,  266,  321,
      267,  286,  287,  268,  194, 1201,  323,  203,  322,  194,
      324,  194,  298, 1201,  204,  288,  327,  299,  292,  293,
      294,  205,  295,  300,  206,  301,  305,  306,  302, 1201,
      328,  194,  207,  323,  303, 1201,  208,  324,  329,  298,
      209,  304,  330,  327,  299,  312,  210,  313,  335,  211,
      300,  314,  301,  305,  306,  302,  194,  328,  315,  207,
      336,  303,  316,  208, 1201,  329, 1201,  209,  304,  330,
      337, 1201,  312,  210,  313,  335,  211, 1201,  314,  325,

      331,  338,  326,  194,  194,  315,  339,  336,  340,  316,
      332,  212,  344,  213,  345,  333,  334,  337,  214,  341,
      346,  342,  347,  215,  194, 1201,  325,  331,  338,  326,
      348,  194,  343,  339,  349,  340, 1201,  332,  212,  344,
      213,  345,  333,  334,  350,  214,  341,  346,  342,  347,
      215,  194,  216,  351,  352,  353,  194,  348,  354,  343,
      217,  349,  355,  218,  356,  361,  219,  362,  357,  220,
      363,  350,  221, 1201, 1201,  367,  194, 1201, 1201,  216,
      351,  352,  353,  194, 1201,  354, 1201,  217,  358,  355,
      218,  356,  361,  219,  362,  357,  220,  363,  368,  221,

      364,  359,  367,  194,  194,  227,  360,  369,  370,  365,
      371,  228,  229,  230,  374,  358,  375,  366,  231,  372,
      376,  381,  377,  379,  194,  368,  380,  364,  359, 1201,
      373,  194,  227,  360,  369,  370,  365,  371,  228,  229,
      230,  374,  378,  375,  366,  231,  372,  376,  381,  377,
      379,  194,  240,  380,  382,  383,  194,  373,  385,  387,
      388,  384,  389,  506,  194, 1201,  241, 1201, 1201,  378,
      507,  386,  242,  243,  393,  194,  194, 1201, 1201,  240,
     1201,  382,  383,  194,  194,  385,  387,  388,  384,  389,
      506,  194,  194,  241,  194,  194, 1201,  507,  386,  242,

      243,  393,  194,  194,  194,  244,  194,  394,  194, 1201,
      508,  194,  194,  245,  194,  395,  194,  246, 1201,  194,
      247,  194,  194,  396,  194, 1201,  194, 1201,  194,  399,
     1201,  194,  244,  194,  394,  194,  194,  508, 1201,  194,
      245,  194,  395,  194,  246,  397,  509,  247,  398,  194,
      396,  194,  254,  194,  255,  194,  399,  256,  400,  510,
      194, 1201,  257,  194,  258,  259, 1201, 1201, 1201,  194,
     1201, 1201,  397,  509,  194,  398,  194, 1201,  411,  254,
      194,  255, 1201, 1201,  256,  400,  510,  194,  412,  257,
     1201,  258,  259,  194,  401,  402,  194,  194,  194, 1201,

      511,  194,  260,  194,  404,  411,  261,  194,  403,  262,
      263,  405,  512,  194,  513,  412,  264,  194,  413,  265,
      194,  401,  402,  414,  194,  194,  194,  511, 1201,  260,
      194,  404, 1201,  261, 1201,  403,  262,  263,  405,  512,
      194,  513, 1201,  264,  194,  413,  265, 1201, 1201, 1201,
      414, 1201, 1201,  194,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,   92,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  188,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  406,  194,  194,  194,
      194,  517,  194,  518,  519,  520, 1201, 1201,  521,  423,
      420,  421,  425,  194,  422, 1201,  424,  194,  194,  194,
      194, 1201,  194,  406,  194,  194,  194,  194,  517,  194,
      518,  519,  520,  194,  194,  521,  423,  420,  421,  425,
      194,  422,  194,  424,  194,  194,  194,  194,  194,  194,
      426, 1201,  194,  445,  452,  407,  408,  409,  194,  410,
      194,  194,  194, 1201, 1201,  432,  522,  523,  194,  194,
     1201, 1201,  194, 1201, 1201,  194,  526,  426,  194,  194,

      445,  452,  407,  408,  409,  194,  410, 1201,  527,  194,
      194,  194,  432,  522,  523,  194,  415,  433,  416,  194,
      194,  417,  194,  526,  435,  194,  194,  418, 1201, 1201,
      194,  194,  434, 1201,  419,  527,  436,  194,  194, 1201,
      194, 1201,  194,  415,  433,  416,  194,  194,  417,  194,
      528,  435,  194,  194,  418,  194,  194,  194,  194,  434,
      194,  419,  437,  436, 1201,  459,  438,  194,  427,  194,
      428, 1201,  194,  194,  429,  194,  194,  528,  194,  194,
      194,  430,  194,  194, 1201,  431, 1201,  194,  439,  437,
      194,  194,  459,  438,  194,  427,  194,  428,  194,  194,

      442,  429,  194,  194,  194,  194, 1201,  194,  430,  462,
      440,  194,  431,  441,  194,  439,  194,  194,  194,  194,
      443,  194,  194,  194,  194,  194,  444,  442,  450, 1201,
      194,  194,  194,  453,  451,  529,  462,  440,  194,  194,
      441,  194,  194,  194, 1201,  532,  194,  443,  194,  194,
      194,  194,  194,  444,  454,  450,  455,  194, 1201,  194,
      453,  451,  529,  456, 1201,  457,  194,  194,  194,  194,
      446,  194,  532,  194, 1201,  194,  458,  194, 1201,  194,
      447,  454,  460,  455,  194,  448,  449,  194,  533, 1201,
      456,  194,  457,  194,  194,  194,  194,  446,  194,  463,

      194,  194,  534,  458,  194,  461,  465,  447,  464,  460,
      194,  194,  448,  449,  194,  533,  194, 1201,  194, 1201,
      194,  194, 1201,  194,  194,  466,  463,  194,  194,  534,
      194,  194,  461,  465, 1201,  464,  194,  194,  467,  194,
      535,  471,  468,  194,  194,  472,  470,  194,  194,  469,
      194,  194,  466, 1201,  194, 1201,  194,  194,  536,  194,
      194,  194,  476,  194, 1201,  467,  194,  535,  471,  468,
      194,  194,  472,  470,  194, 1201,  469,  194,  473,  537,
      194,  194,  194,  194,  478,  536,  194,  194,  194,  476,
      194,  474,  194, 1201, 1201, 1201,  475,  194,  538,  477,

      482,  194,  194, 1201,  539,  473,  537,  194,  194,  194,
      194,  478,  194,  479, 1201,  194, 1201,  194,  474,  194,
      483,  194,  480,  475,  194,  538,  477,  482,  194,  194,
      481,  539,  485,  540,  484,  194,  194,  194, 1201,  194,
      479,  194,  194,  486,  194,  194,  194,  483,  194,  480,
      541,  194,  542,  487,  489,  543,  194,  481,  194,  485,
      540,  484,  194,  194,  488,  194,  194,  194,  194,  491,
      486,  194,  194,  194,  194,  490, 1201,  541,  194,  542,
      487,  489,  543,  194,  492,  194, 1201,  194,  194,  496,
      194,  488,  194,  194,  194, 1201,  491,  544, 1201,  194,

      502,  194,  490,  494,  493,  194,  495, 1201,  194,  194,
      194,  492,  500,  497,  194,  194,  496,  194,  504,  194,
      194,  194,  194,  194,  544,  501,  194,  502,  498,  194,
      494,  493,  194,  495,  499,  194,  194,  194,  503,  500,
      497,  194,  194,  194, 1201,  504,  194,  194,  194,  194,
      194, 1201,  501, 1201, 1201,  498,  194,  545,  524,  194,
      546,  499,  525,  547,  514,  503,  515,  530,  194,  194,
      194,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  516,  531,  548,  545,  524,  549,  546,  550,  525,
      547,  514,  551,  515,  530,  552,  553,  554,  555,  556,

      557,  558,  559,  560,  561,  563,  564,  565,  516,  531,
      548,  566,  567,  549,  562,  550,  568,  569,  570,  551,
      571,  572,  552,  553,  554,  555,  556,  557,  558,  559,
      560,  561,  563,  564,  565,  573,  574,  575,  566,  567,
      576,  562,  577,  568,  569,  570,  578,  571,  572,  579,
      580,  581,  582,  583,  584,  585,  586,  587,  588,  589,
      590,  591,  573,  574,  575,  592,  593,  576,  594,  577,
      595,  596,  597,  578,  598,  599,  579,  580,  581,  582,
      583,  584,  585,  586,  587,  588,  589,  590,  591,  600,
      601,  602,  592,  593,  604,  594,  605,  595,  596,  597,

      603,  598,  599,  606,  607,  608,  609,  610,  611,  612,
      613,  615,  616, 1201,  614, 1201,  600,  601,  602, 1201,
     1201,  604, 1201,  605, 1201, 1201, 1201,  603, 1201, 1201,
      606,  607,  608,  609,  610,  611,  612,  613,  615,  616,
      194,  614,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  618,  194,  619,  194,  194,  194, 1201, 1201,
      194,  621,  620, 1201, 1201,  194, 1201,  194,  730, 1201,
      731, 1201,  194,  194,  194,  194,  194,  194,  194,  618,
      194,  619,  194,  194,  194,  194,  194,  194,  621,  620,
      194,  194,  194,  632,  623,  730,  622,  731,  194,  194,

      194,  194,  194,  194,  194,  194,  194,  194, 1201,  624,
      194,  194,  194,  194,  625,  194, 1201,  194,  194, 1201,
      632,  623,  626,  622,  627,  194,  732,  194,  629, 1201,
      194, 1201,  194,  194,  194,  194,  624,  194,  194,  628,
      631,  625,  194,  194,  194, 1201,  630, 1201,  733,  626,
      194,  627,  194,  732,  194,  629,  634,  194,  194,  194,
      194, 1201,  194,  633,  636,  734,  628,  631,  637, 1201,
      194,  194,  635,  630,  194,  733,  735,  194,  194,  194,
      194,  639,  194,  634, 1201,  194, 1201,  194,  194,  736,
      633,  636,  734,  194,  194,  637,  638,  640,  645,  635,

     1201,  194,  194,  735, 1201,  194,  641,  194,  639,  194,
      194,  642,  644,  194,  194,  194,  736, 1201,  194, 1201,
      194,  194,  737,  638,  640,  645,  643,  194, 1201,  194,
      194,  194,  647,  641,  194,  194, 1201,  194,  642,  644,
      194,  194,  646,  738,  649,  194,  194,  194,  651,  737,
     1201, 1201,  194,  643,  194,  194,  650,  194,  194,  647,
      194,  194,  194,  648,  194,  657,  194, 1201,  194,  646,
      738,  649,  194,  194,  194,  651,  652,  194,  194,  194,
      194,  194,  194,  650,  654,  194,  194,  194,  739, 1201,
      648,  194,  657,  194,  655,  194,  194,  194,  194,  194,

      653,  194, 1201,  652,  194,  194,  194,  194,  194,  194,
      656,  654,  194,  194,  658,  739,  194,  659,  194,  194,
     1201,  655,  194,  194,  194,  194,  661,  653,  194,  194,
      660,  662,  194,  194,  194,  740,  194,  656,  194,  194,
     1201,  658,  194,  194,  659,  194,  194,  194,  663,  194,
      664,  194,  194,  661,  194,  665,  194,  660,  662,  194,
      194,  194,  740,  741,  194,  194,  194,  194,  194,  194,
      668,  194,  670,  667,  194,  663,  194,  664,  194,  194,
      194,  194,  665,  666,  194,  671,  669,  194,  194,  672,
      741,  194,  194, 1201,  194,  194,  194,  668,  194,  670,

      667,  194,  194,  194,  673,  194,  678,  194, 1201,  194,
      666,  194,  671,  669,  674,  194,  672,  675,  194,  194,
      194,  194,  194,  194,  194, 1201,  194,  676,  194,  194,
      194,  673,  194,  678,  679,  677,  194, 1201,  194, 1201,
      194,  674,  680,  194,  675,  194,  742,  194,  194,  194,
      194,  194,  681,  194,  676,  194,  194,  194,  194,  743,
      682,  679,  677,  194,  194,  194,  683,  194,  744,  680,
      194,  684,  194,  742,  194,  194,  194,  194,  194,  681,
      194, 1201,  194,  194,  194,  194,  743,  682,  686,  685,
      194,  194,  194,  683,  194,  744, 1201,  194,  684,  194,

      194,  194,  194,  194,  687,  194,  194,  194,  690,  194,
      691,  194,  745, 1201,  692,  686,  685,  194,  194,  194,
      689,  194,  688,  194,  194, 1201,  194,  194,  194,  194,
      194,  687,  693,  194,  194,  690,  194,  691,  194,  745,
      194,  692,  695,  194,  194,  194,  746,  689,  697,  688,
      194,  694,  194,  194,  194,  194,  194,  194, 1201,  693,
      194,  194,  194,  194,  194,  194,  699,  194,  701,  695,
      194,  696,  194,  746,  703,  697,  194,  698,  694,  194,
      194,  194,  194,  194,  194,  194,  702,  194,  194,  194,
      194,  194,  700,  699,  194,  701,  194, 1201,  696,  194,

      194,  703,  194,  194,  698,  194, 1201,  194, 1201,  194,
      194,  194,  194,  702,  194,  194,  194,  194,  194,  700,
      704,  194,  194,  194,  705,  709,  712,  194,  194,  194,
      194,  706,  194,  707,  194,  708,  194,  194,  194,  194,
     1201,  194, 1201,  194,  194,  194,  194,  704,  194,  194,
      194,  705,  709,  712,  710,  194,  747,  194,  706,  194,
      707,  194,  708,  194,  194,  194,  194,  194,  748,  194,
      714, 1201,  194,  194,  749,  194,  711,  194,  713,  715,
      750,  710,  716,  747,  717,  751,  194,  194,  194,  194,
      194, 1201,  194,  194,  194,  748,  194,  714,  718,  194,

      719,  749,  720,  711,  194,  713,  715,  750,  194,  716,
      194,  717,  751,  194,  194,  194,  194,  194,  194,  194,
      194,  722, 1201,  194,  194,  718,  721,  719,  752,  720,
      194,  194,  194, 1201, 1201,  194,  723,  194,  194,  753,
      194,  194, 1201,  194,  727,  194, 1201,  724,  722,  194,
      194,  194,  194,  721,  754,  752,  755,  194,  725,  194,
      194,  194,  726,  723,  756,  194,  753,  757,  194,  194,
      194,  727,  758,  728,  724,  759,  194,  760,  761,  194,
      194,  754,  762,  755,  763,  725,  764,  194,  194,  726,
      765,  756,  766,  767,  757,  768,  194,  769,  770,  758,

      728,  771,  759,  772,  760,  761,  775,  194,  776,  762,
      773,  763,  777,  764,  778,  779,  780,  765,  781,  766,
      767,  774,  768,  782,  769,  770,  783,  784,  771,  785,
      772,  786,  787,  775,  788,  776,  789,  773,  790,  777,
      791,  778,  779,  780,  792,  781,  793,  794,  774,  795,
      782,  796,  797,  783,  784,  798,  785,  799,  786,  787,
      800,  788,  801,  789,  802,  790,  803,  791,  804,  805,
      806,  792,  807,  793,  794,  808,  795,  809,  796,  797,
      810,  811,  798,  812,  799,  813,  814,  800, 1201,  801,
     1201,  802, 1201,  803, 1201,  804,  805,  806,  194,  807,

      194,  194,  808,  194,  809, 1201,  194,  810,  811,  822,
      812,  816,  813,  814,  817,  194, 1201,  194,  194,  820,
      818,  194,  902,  819,  821,  194,  194,  194,  194,  194,
      194, 1201,  194,  194,  194,  194,  822,  194,  816,  823,
      903,  817,  194,  194,  194,  194,  820,  818,  194,  902,
      819,  821,  194,  194,  194,  904,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  824,  823,  903,  825,  194,
      194,  194,  829,  194,  905,  826, 1201,  194,  194,  194,
      194,  194,  904,  906,  194,  194,  827,  194,  194,  194,
      194,  194,  824,  194,  830,  825,  194,  194,  194,  829,

      194,  905,  826,  828,  194,  194, 1201,  194,  194,  194,
      906,  194,  194,  827,  194,  194,  194,  194,  194,  832,
      194,  830,  833,  907,  194,  194,  831,  194, 1201,  194,
      828,  194,  194,  836,  194,  194,  194,  194,  194,  194,
      835,  194,  194,  834,  194,  194,  832,  194, 1201,  833,
      907,  908,  194,  831,  194,  837,  194,  194,  194,  194,
      836,  194,  194,  838,  194,  194,  194,  835,  194,  194,
      834,  194,  194,  840,  194,  839,  194,  909,  908, 1201,
     1201, 1201,  837, 1201,  194,  194,  194, 1201,  194,  194,
      838,  194,  194,  194,  194,  194,  194,  194,  194, 1201,

      840, 1201,  839,  194,  909,  841,  194,  845,  842,  847,
      194,  194,  194,  194,  194,  194,  846,  194,  194,  194,
      194,  194,  843,  194,  194,  844,  194, 1201,  194,  194,
      194,  194,  841,  194,  845,  842,  847,  194,  194,  194,
      194,  194,  194,  846,  194,  194,  194,  194,  194,  843,
      849,  194,  844,  194,  194,  194,  194,  194,  194,  850,
      848, 1201,  194,  194,  194,  194,  194,  194,  194,  194,
     1201,  194,  194,  852,  194,  194,  194,  849,  194,  851,
     1201,  194,  854,  194,  194,  194,  850,  848,  194,  194,
      194,  194,  194, 1201,  194,  194,  194,  194,  194,  853,

      852,  194,  194,  194, 1201,  194,  851,  855, 1201,  854,
      194,  194,  194, 1201,  194,  194,  856,  194,  194,  194,
      194,  194, 1201,  194,  194, 1201,  853, 1201, 1201,  194,
      194,  857,  194,  858,  855,  194,  910,  859,  194,  194,
      194,  194, 1201,  856,  194,  194,  194,  194,  860,  194,
      194,  194,  194,  194,  194,  194,  861,  194,  857, 1201,
      858, 1201,  194,  910,  859,  194,  194,  194,  862,  194,
      194,  194,  194,  194,  194,  860,  194,  194,  194,  194,
      194,  194,  194,  861,  194,  864,  194, 1201,  194,  867,
      194,  863, 1201, 1201,  194,  862,  194,  194,  194,  194,

      194,  194,  865,  866,  194,  194,  194,  868,  194, 1201,
     1201,  194,  864,  194,  194,  194,  867,  194,  863,  194,
      869,  194,  194,  870,  194,  194, 1201, 1201,  194,  865,
      866,  194,  194,  194,  868,  194,  873,  871,  872,  194,
      194,  194,  194,  194,  194,  194,  194,  869,  194,  194,
      870,  194,  194,  874,  875,  194,  194,  194,  194, 1201,
      194, 1201, 1201,  873,  871,  872,  194,  194,  911,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194, 1201,
      874,  875,  876,  194,  194,  194,  877,  194,  194,  879,
      194,  194,  194,  194,  194,  911,  880, 1201, 1201,  881,

      194,  194,  912,  194,  194,  194,  878,  194,  194,  876,
      194,  194,  194,  877,  913,  194,  879,  194,  194,  194,
      194,  194,  882,  880,  194,  194,  881,  194,  884,  912,
      886, 1201,  883,  878,  194,  194,  194,  194,  194,  194,
      885,  913,  194, 1201,  194,  194,  194, 1201,  194,  882,
      194,  194,  194, 1201,  194,  884,  194,  886,  194,  883,
      194,  194,  194,  194, 1201, 1201,  194,  885,  887,  194,
      194,  194,  194,  194,  888,  194,  914,  194,  194,  896,
      194,  194,  194,  194,  889,  194, 1201,  194,  194,  194,
      194,  891,  890,  194,  194,  887,  194,  194, 1201,  194,

      893,  888,  194,  914,  194,  194,  896,  194,  194,  194,
      194,  889,  892,  194,  194,  895,  194,  194,  891,  890,
     1201,  194,  915,  194,  194,  894,  194,  893, 1201,  194,
      194,  194,  916,  194,  194,  194, 1201,  194,  897,  892,
      194,  194,  895,  194,  194,  917,  899,  194,  194,  915,
      918,  194,  894,  919,  194,  194,  194,  194,  920,  916,
      194,  194,  194,  898,  194,  897,  194,  194,  194,  921,
      900,  194,  917,  899,  194,  194,  194,  918,  922,  923,
      919,  194,  194,  194,  924,  920,  925,  926,  927,  928,
      898,  194,  929,  194,  194,  194,  921,  900,  930,  931,

      932,  933,  935,  194,  934,  922,  923,  936,  937,  938,
      939,  924,  940,  925,  926,  927,  928,  941,  942,  929,
      943,  944,  945,  946,  947,  930,  931,  932,  933,  935,
      948,  934,  949,  950,  936,  937,  938,  939,  951,  940,
      952,  953,  954,  955,  941,  942,  956,  943,  944,  945,
      946,  947,  957,  958,  959,  960,  961,  948,  962,  949,
      950,  963, 1201, 1201,  194,  951,  194,  952,  953,  954,
      955, 1201,  194,  956,  194, 1201,  966,  194,  967,  957,
      958,  959,  960,  961,  194,  962,  194,  194,  963,  968,
      194,  194,  194,  194,  194,  965,  194,  194,  194,  194,

      194,  194,  971,  966,  194,  967,  969,  194,  194,  970,
      194,  194,  973,  194,  194, 1201,  968,  194,  194,  194,
      194,  194,  965,  194,  194,  194, 1028,  194,  194,  971,
      194,  194,  194,  969,  194,  194,  970,  194,  194,  973,
      972,  976,  974,  979,  194,  194,  194,  194,  975, 1201,
      194,  194,  977, 1028,  194,  194,  194,  194,  194,  194,
      194,  978, 1029,  194,  194,  194,  194,  972,  976,  974,
      979,  194, 1201,  194,  194,  975,  194,  194,  194,  977,
      194,  194,  194,  194,  194,  194,  980,  194,  978, 1029,
      194,  194, 1201,  194,  982,  983,  984, 1201, 1201,  981,

      194,  194,  194,  194,  194,  194, 1201,  194, 1030,  194,
      194,  194,  194,  980,  987,  194,  194, 1201,  194,  194,
      194,  982,  983,  984,  194,  985,  981,  194,  988,  194,
      194,  194,  194,  986,  989, 1030,  194,  194,  194,  194,
     1201,  987,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  985, 1201, 1031,  988,  194,  194, 1032,  194,
      986,  989,  194,  194,  990,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  991,  194,  194,  194,  194,  194,
      992, 1031,  194,  194,  194, 1032,  194,  194,  993,  194,
     1201,  990,  194,  194,  194,  194,  194,  194,  194,  194,

      194,  991,  194,  995,  194,  194,  194,  992, 1201,  194,
     1201,  194, 1033,  194,  194,  993,  194,  994,  194,  194,
      194,  194,  194,  194, 1034,  194,  194,  194,  998,  194,
      995,  194,  996,  194, 1201,  997,  194,  999,  194, 1033,
      194,  194, 1201,  194,  994,  194,  194,  194,  194,  194,
      194, 1034,  194,  194,  194,  998,  194,  194,  194,  996,
      194, 1002,  997,  194,  999,  194, 1000, 1001,  194,  194,
     1201,  194,  194,  194,  194,  194,  194, 1004,  194,  194,
     1201, 1007, 1201,  194,  194,  194, 1201,  194, 1002,  194,
     1003,  194, 1201, 1000, 1001,  194,  194,  194,  194,  194,

     1005,  194,  194,  194, 1004,  194,  194,  194, 1007,  194,
      194, 1009, 1201, 1008,  194,  194,  194, 1003,  194, 1006,
     1201, 1010,  194, 1035,  194,  194,  194, 1005,  194,  194,
      194, 1036, 1201,  194,  194,  194,  194,  194, 1009,  194,
     1008, 1201,  194, 1011,  194,  194, 1006,  194, 1010, 1037,
     1035, 1013,  194,  194, 1012, 1201,  194,  194, 1036,  194,
      194, 1015,  194,  194,  194,  194,  194,  194, 1014,  194,
     1011,  194,  194, 1017,  194, 1201, 1037, 1016, 1013, 1038,
      194, 1012,  194,  194, 1201,  194,  194,  194, 1015,  194,
      194,  194,  194,  194,  194, 1014,  194, 1018, 1201, 1019,

     1017, 1020,  194,  194, 1016,  194, 1038,  194, 1201,  194,
      194, 1021,  194,  194, 1022,  194,  194, 1023, 1201,  194,
      194, 1039, 1201,  194, 1018,  194, 1019, 1201, 1020,  194,
      194,  194,  194,  194,  194,  194,  194,  194, 1021,  194,
      194, 1022,  194, 1040, 1023, 1025,  194, 1024, 1039,  194,
      194, 1026,  194,  194,  194,  194,  194, 1041,  194, 1042,
      194,  194,  194,  194,  194, 1043,  194, 1044, 1045,  194,
     1040, 1046, 1025, 1047, 1024,  194,  194, 1048, 1026, 1049,
      194,  194,  194,  194, 1041, 1050, 1042, 1051, 1052, 1053,
     1054, 1055, 1043, 1056, 1044, 1045,  194, 1057, 1046, 1058,

     1047, 1059,  194, 1060, 1048, 1061, 1049, 1062, 1063, 1064,
     1201, 1066, 1050,  194, 1051, 1052, 1053, 1054, 1055, 1201,
     1056, 1068, 1201,  194, 1057,  194, 1058,  194, 1059,  194,
     1060,  194, 1061,  194, 1062, 1063, 1064,  194, 1066, 1070,
      194,  194, 1069,  194, 1201,  194, 1067,  194, 1068,  194,
      194,  194,  194, 1201,  194,  194,  194,  194,  194,  194,
      194, 1074, 1071,  194,  194, 1072, 1070, 1073,  194, 1069,
      194,  194,  194, 1067,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194, 1201,  194, 1075, 1074, 1071,
      194,  194, 1072, 1078, 1073,  194, 1076,  194,  194,  194,

      194,  194,  194, 1104,  194, 1201,  194,  194,  194, 1077,
      194,  194,  194,  194, 1075,  194, 1201,  194,  194,  194,
     1078, 1079,  194, 1076,  194,  194,  194,  194,  194,  194,
     1104,  194,  194,  194,  194,  194, 1077,  194,  194,  194,
      194,  194,  194, 1080,  194,  194,  194,  194, 1079,  194,
     1081,  194,  194,  194,  194,  194,  194, 1201,  194,  194,
      194,  194,  194,  194,  194, 1083,  194,  194,  194,  194,
     1080, 1084,  194,  194,  194,  194,  194, 1081,  194, 1082,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194, 1201, 1083,  194,  194,  194,  194, 1201, 1084, 1087,

      194, 1085,  194,  194,  194,  194, 1082,  194,  194, 1089,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
     1088, 1105,  194,  194, 1086,  194, 1087, 1201, 1085,  194,
      194,  194,  194,  194,  194,  194, 1089,  194, 1090,  194,
     1091, 1092,  194,  194,  194,  194,  194, 1088, 1105, 1201,
      194, 1086,  194,  194,  194, 1201,  194,  194,  194,  194,
      194, 1201,  194,  194,  194, 1090,  194, 1091, 1092,  194,
      194, 1093, 1094,  194,  194, 1106,  194,  194,  194,  194,
      194,  194, 1095, 1096,  194,  194,  194, 1097, 1098,  194,
      194,  194,  194,  194, 1201, 1099,  194,  194, 1093, 1094,

      194,  194, 1106,  194,  194,  194,  194,  194, 1107, 1095,
     1096,  194,  194,  194, 1097, 1098,  194,  194,  194,  194,
      194,  194, 1099,  194,  194,  194, 1108,  194, 1100,  194,
      194, 1109, 1110,  194,  194, 1107,  194, 1102,  194,  194,
      194,  194, 1101,  194,  194,  194, 1111, 1112,  194,  194,
      194, 1113,  194, 1108,  194, 1100,  194,  194, 1109, 1110,
      194, 1114, 1115,  194, 1102, 1116, 1117, 1118,  194, 1101,
     1119, 1120,  194, 1111, 1112,  194,  194,  194, 1113,  194,
      194, 1122, 1201,  194,  194, 1123, 1201, 1201, 1114, 1115,
     1201, 1140, 1116, 1117, 1118,  194, 1124, 1119, 1120,  194,

      194,  194,  194,  194,  194,  194,  194,  194, 1122, 1125,
      194,  194, 1123,  194,  194,  194,  194, 1126, 1140,  194,
     1201, 1201,  194, 1124, 1141,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194, 1125,  194,  194,  194,
      194,  194,  194,  194, 1126,  194,  194,  194, 1128,  194,
      194, 1141,  194, 1127, 1201, 1201,  194, 1201,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194, 1131,
      194,  194,  194,  194,  194, 1128,  194,  194, 1129,  194,
     1127, 1130,  194,  194,  194,  194,  194, 1142,  194,  194,
      194,  194,  194,  194,  194,  194, 1131,  194,  194, 1132,

      194,  194,  194,  194,  194, 1129,  194, 1133, 1130,  194,
      194,  194,  194,  194, 1142,  194,  194,  194,  194,  194,
      194,  194,  194,  194, 1201, 1138, 1132,  194,  194,  194,
      194,  194, 1134,  194, 1133, 1135,  194,  194,  194,  194,
      194,  194,  194, 1143,  194,  194, 1136,  194,  194,  194,
      194, 1137, 1138, 1144,  194, 1145,  194, 1146,  194, 1134,
      194,  194, 1135,  194,  194,  194,  194,  194,  194,  194,
     1143,  194,  194, 1136,  194,  194,  194,  194, 1137, 1148,
     1144,  194, 1145,  194, 1146,  194,  194,  194,  194,  194,
     1149,  194,  194,  194,  194,  194,  194,  194,  194, 1201,

     1157,  194,  194,  194,  194,  194, 1148, 1150,  194,  194,
      194,  194,  194,  194,  194,  194,  194, 1149,  194,  194,
      194, 1158,  194,  194,  194,  194,  194, 1157,  194, 1159,
      194,  194,  194, 1151, 1150, 1152,  194,  194,  194,  194,
      194,  194,  194,  194, 1162, 1154,  194,  194, 1158, 1161,
     1156, 1167,  194,  194, 1153,  194, 1159,  194,  194, 1201,
     1151,  194, 1152,  194,  194,  194,  194,  194,  194,  194,
      194, 1162, 1154,  194,  194,  194, 1172,  194, 1167, 1163,
      194, 1153,  194, 1156, 1156,  194,  194, 1164,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194, 1161, 1156,

      194,  194,  194, 1172,  194, 1174, 1163,  194,  194,  194,
     1176, 1178,  194,  194, 1164,  194,  194, 1170, 1180, 1182,
     1184,  194,  194, 1186,  194, 1166, 1188,  194,  194,  194,
     1190, 1192, 1174, 1194, 1201,  194,  194, 1176, 1178, 1201,
     1169, 1201,  194, 1201, 1170, 1180, 1182, 1184, 1201, 1201,
     1186, 1201, 1166, 1188, 1201,  194,  194, 1190, 1192, 1201,
     1194, 1201, 1201, 1201, 1201, 1201, 1201, 1169,   46,   46,
       46,   46,   46,   88, 1201, 1201,   88,   88,  179,  179,
      179, 1201,  179,  181, 1201,  181,  181,  181,  184, 1201,
      184,  184,  184,  194, 1201,  194,  194,  194,    7, 1201,

     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201
    } ;

static yyconst flex_int16_t yy_chk[4876] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    9,    9,   10,   10,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   15,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       18,   21,   22,   21,   24, 1204,   23,   30,   24,   21,
     1198,   21,   24,   23,   31,   21,   21,   44,   24,   99,

       23,   24,   22,   23, 1197,   25, 1196,   25,   21,   22,
       21,   24,   25,   23,   30,   24,   21,   25,   21,   24,
       23,   31,   21,   21,   44,   24,   99,   23,   24,   22,
       23,   27,   25,   28,   25, 1195,   32,   27, 1193,   25,
       32,   28,   29,   42,   25,   26,   32,   28,   29,   29,
       29,   42, 1191,   26, 1189,   29,   26, 1187,   27,   26,
       28, 1185,   26,   32,   27,   26, 1183,   32,   28,   29,
       42, 1181,   26,   32,   28,   29,   29,   29,   42,   34,
       26,   33,   29,   26,   36,   33,   26,   43,   43,   26,
       35,   33,   26,   34,  100,   36,   49,   49,   35,   34,

       34,   36,   35,   38, 1179,   35,   34,   38,   33,   50,
       50,   36,   33,   38,   43,   43, 1177,   35,   33, 1175,
       34,  100,   36,  103,   55,   35,   34,   34,   36,   35,
       38,   41,   35,   41,   38,   55,   41,   58,   58, 1173,
       38,   39,  104,   39, 1171,   71,   39,   77,   86,   86,
      103,   39, 1168,   39,   39, 1165,   70, 1160,   41, 1155,
       41,  108, 1147,   41,   67,   71,   70,   77,   39,  104,
       39,   67,   71,   39,   77,   72,   70,   67,   39,   72,
       39,   39,   40,   70,   67,   72,   40,  110,  108,   40,
       40,   67,   71,   70,   77,   72,   40,  110,   67,   40,

      182,  182,   72,   70,   67, 1139,   72, 1140, 1140,   40,
     1121,   67,   72,   40,  110, 1103,   40,   40, 1065, 1027,
      964,  901,   72,   40,  110,  815,   40,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   61,   61,
      729,   61,   61,   61,   61,   61,   61,   84,   68,  114,
      617,  505,   68,  391,  276,  115,   68,   61,   61,   61,
       73,  101,   68,   61,   73,   61,  116,   84,  117,  101,
       73,   61,   68,   61,   84,   68,  114,   61,   61,   68,
       73,  102,  115,   68,  102,  186,  184,   73,  101,   68,

       61,   73,   61,  116,   84,  117,  101,   73,   61,   68,
       61,   90,   88,  118,   61,   61,   85,   73,  102,   60,
       59,  102,   76,   61,   62,   62,   76,   62,   62,   62,
       62,   62,   62,   76,   82,   52,   51,   78,   82,   76,
      118,   78,   82,   62,   62,   62,   76,   78,  120,   76,
       62,   47,   45,   76,  121,   20,  122,   78,   82,   83,
       76,   82,   83,   83,   78,   82,   76,   19,   78,   82,
       62,  107,   11,   76,   78,  120,  123,   62,  107,   83,
        7,  121,   81,  122,   78,   82,   83,    4,    3,   83,
       83,   81,  124,   81,  105,  105,   81,   62,  107,   62,

       63,  125,   81,  123,   63,  107,   83,   63,  105,   81,
        0,  109,  109,  109,   63,  109,    0,   63,   81,  124,
       81,  105,  105,   81,   63,    0,  126,   63,  125,   81,
      127,   63,  111,    0,   63,  105,  129,  111,  109,  109,
      109,   63,  109,  112,   63,  112,  113,  113,  112,    0,
      130,   63,   64,  126,  112,    0,   64,  127,  132,  111,
       64,  112,  133,  129,  111,  119,   64,  119,  135,   64,
      112,  119,  112,  113,  113,  112,   64,  130,  119,   64,
      136,  112,  119,   64,    0,  132,    0,   64,  112,  133,
      137,    0,  119,   64,  119,  135,   64,    0,  119,  128,

      134,  138,  128,   64,   65,  119,  139,  136,  139,  119,
      134,   65,  141,   65,  142,  134,  134,  137,   65,  140,
      143,  140,  144,   65,   65,    0,  128,  134,  138,  128,
      145,   65,  140,  139,  146,  139,    0,  134,   65,  141,
       65,  142,  134,  134,  147,   65,  140,  143,  140,  144,
       65,   65,   66,  148,  150,  151,   66,  145,  152,  140,
       66,  146,  153,   66,  154,  156,   66,  157,  154,   66,
      158,  147,   66,    0,    0,  160,   66,    0,    0,   66,
      148,  150,  151,   66,    0,  152,    0,   66,  155,  153,
       66,  154,  156,   66,  157,  154,   66,  158,  161,   66,

      159,  155,  160,   66,   69,   69,  155,  162,  163,  159,
      164,   69,   69,   69,  166,  155,  167,  159,   69,  165,
      168,  171,  169,  170,   69,  161,  170,  159,  155,    0,
      165,   69,   69,  155,  162,  163,  159,  164,   69,   69,
       69,  166,  169,  167,  159,   69,  165,  168,  171,  169,
      170,   69,   74,  170,  172,  173,   74,  165,  174,  175,
      176,  173,  177,  279,  194,    0,   74,    0,    0,  169,
      281,  174,   74,   74,  195,  195,   74,    0,    0,   74,
        0,  172,  173,   74,  194,  174,  175,  176,  173,  177,
      279,  194,  196,   74,  202,  195,    0,  281,  174,   74,

       74,  195,  195,   74,   75,   75,  227,  196,  197,    0,
      282,  194,  196,   75,  202,  197,  199,   75,    0,  196,
       75,  202,  195,  197,   75,    0,  227,    0,  197,  199,
        0,   75,   75,  227,  196,  197,  199,  282,    0,  196,
       75,  202,  197,  199,   75,  198,  284,   75,  198,  198,
      197,   75,   79,  227,   79,  197,  199,   79,  200,  286,
      200,    0,   79,  199,   79,   79,    0,    0,    0,  198,
        0,    0,  198,  284,   79,  198,  198,    0,  206,   79,
      200,   79,    0,    0,   79,  200,  286,  200,  206,   79,
        0,   79,   79,  201,  201,  201,  198,  203,  206,    0,

      287,   79,   80,  207,  203,  206,   80,  200,  201,   80,
       80,  203,  288,  201,  289,  206,   80,  203,  207,   80,
      201,  201,  201,  207,  203,  206,   80,  287,    0,   80,
      207,  203,    0,   80,    0,  201,   80,   80,  203,  288,
      201,  289,    0,   80,  203,  207,   80,    0,    0,    0,
      207,    0,    0,   80,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  204,  209,  210,  211,
      204,  291,  212,  292,  293,  294,    0,    0,  295,  211,
      209,  209,  213,  213,  210,    0,  212,  209,  210,  211,
      204,    0,  212,  204,  209,  210,  211,  204,  291,  212,
      292,  293,  294,  213,  233,  295,  211,  209,  209,  213,
      213,  210,  229,  212,  209,  210,  211,  204,  205,  212,
      214,    0,  214,  229,  233,  205,  205,  205,  216,  205,
      213,  233,  229,    0,    0,  216,  296,  297,  205,  229,
        0,    0,  214,    0,    0,  205,  299,  214,  216,  214,

      229,  233,  205,  205,  205,  216,  205,    0,  300,  229,
      217,  219,  216,  296,  297,  205,  208,  217,  208,  214,
      208,  208,  218,  299,  219,  216,  220,  208,    0,    0,
      217,  219,  218,    0,  208,  300,  220,  217,  219,    0,
      208,    0,  218,  208,  217,  208,  220,  208,  208,  218,
      301,  219,  237,  220,  208,  221,  222,  217,  219,  218,
      245,  208,  221,  220,    0,  237,  222,  208,  215,  218,
      215,    0,  237,  220,  215,  221,  222,  301,  223,  237,
      245,  215,  221,  222,    0,  215,    0,  245,  223,  221,
      215,  225,  237,  222,  240,  215,  224,  215,  223,  237,

      225,  215,  221,  222,  226,  223,    0,  245,  215,  240,
      224,  225,  215,  224,  240,  223,  224,  215,  225,  231,
      226,  240,  228,  224,  226,  223,  228,  225,  231,    0,
      232,  226,  234,  234,  232,  302,  240,  224,  225,  231,
      224,  240,  228,  224,    0,  304,  231,  226,  235,  228,
      232,  226,  234,  228,  235,  231,  235,  232,    0,  234,
      234,  232,  302,  236,    0,  236,  231,  236,  235,  228,
      230,  230,  304,  238,    0,  235,  236,  232,    0,  234,
      230,  235,  238,  235,  241,  230,  230,  236,  305,    0,
      236,  230,  236,  238,  236,  235,  239,  230,  230,  241,

      238,  242,  306,  236,  241,  239,  243,  230,  242,  238,
      243,  241,  230,  230,  236,  305,  239,    0,  230,    0,
      238,  242,    0,  239,  244,  244,  241,  247,  242,  306,
      243,  241,  239,  243,    0,  242,  248,  243,  246,  246,
      307,  250,  247,  239,  244,  250,  249,  247,  242,  248,
      249,  244,  244,    0,  247,    0,  248,  243,  308,  246,
      252,  250,  252,  248,    0,  246,  246,  307,  250,  247,
      249,  244,  250,  249,  247,    0,  248,  249,  251,  309,
      252,  254,  251,  248,  254,  308,  246,  252,  250,  252,
      256,  251,  253,    0,    0,    0,  251,  249,  311,  253,

      256,  254,  251,    0,  312,  251,  309,  252,  254,  251,
      256,  254,  253,  255,    0,  255,    0,  256,  251,  253,
      257,  258,  255,  251,  257,  311,  253,  256,  254,  251,
      255,  312,  259,  313,  258,  255,  259,  256,    0,  253,
      255,  258,  255,  260,  257,  261,  260,  257,  258,  255,
      314,  257,  315,  261,  262,  316,  259,  255,  264,  259,
      313,  258,  255,  259,  261,  261,  260,  263,  258,  264,
      260,  257,  261,  260,  262,  263,    0,  314,  264,  315,
      261,  262,  316,  259,  265,  264,    0,  263,  265,  267,
      267,  261,  261,  260,  263,    0,  264,  317,    0,  266,

      271,  262,  263,  266,  265,  264,  266,    0,  265,  268,
      267,  265,  270,  268,  263,  265,  267,  267,  273,  266,
      271,  269,  273,  272,  317,  270,  266,  271,  269,  268,
      266,  265,  270,  266,  269,  265,  268,  267,  272,  270,
      268,  269,  273,  272,    0,  273,  266,  271,  269,  273,
      272,    0,  270,    0,    0,  269,  268,  318,  298,  270,
      319,  269,  298,  320,  290,  272,  290,  303,  269,  273,
      272,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  290,  303,  321,  318,  298,  322,  319,  323,  298,
      320,  290,  324,  290,  303,  325,  326,  327,  328,  329,

      330,  331,  332,  333,  334,  335,  336,  338,  290,  303,
      321,  339,  340,  322,  334,  323,  341,  342,  343,  324,
      344,  345,  325,  326,  327,  328,  329,  330,  331,  332,
      333,  334,  335,  336,  338,  346,  347,  349,  339,  340,
      350,  334,  351,  341,  342,  343,  352,  344,  345,  353,
      354,  355,  356,  357,  358,  359,  360,  361,  362,  363,
      364,  365,  346,  347,  349,  367,  368,  350,  369,  351,
      370,  371,  372,  352,  373,  374,  353,  354,  355,  356,
      357,  358,  359,  360,  361,  362,  363,  364,  365,  375,
      377,  378,  367,  368,  379,  369,  379,  370,  371,  372,

      378,  373,  374,  380,  381,  382,  383,  384,  385,  386,
      387,  388,  389,    0,  387,    0,  375,  377,  378,    0,
        0,  379,    0,  379,    0,    0,    0,  378,    0,    0,
      380,  381,  382,  383,  384,  385,  386,  387,  388,  389,
      393,  387,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  394,  395,  396,  397,  398,  400,    0,    0,
      393,  399,  397,    0,    0,  399,    0,  393,  506,    0,
      507,    0,  394,  395,  396,  397,  398,  400,  409,  394,
      395,  396,  397,  398,  400,  399,  401,  393,  399,  397,
      402,  403,  399,  409,  402,  506,  401,  507,  409,  394,

      395,  396,  397,  398,  400,  409,  401,  404,    0,  403,
      402,  403,  399,  401,  404,  406,    0,  402,  403,    0,
      409,  402,  405,  401,  405,  409,  508,  404,  406,    0,
      407,    0,  408,  401,  404,  406,  403,  402,  403,  405,
      408,  404,  406,  410,  405,    0,  407,    0,  509,  405,
      407,  405,  408,  508,  404,  406,  411,  407,  412,  408,
      411,    0,  406,  410,  413,  510,  405,  408,  413,    0,
      410,  405,  412,  407,  415,  509,  511,  407,  412,  408,
      411,  415,  414,  411,    0,  412,    0,  411,  413,  512,
      410,  413,  510,  416,  415,  413,  414,  416,  420,  412,

        0,  415,  414,  511,    0,  412,  417,  411,  415,  414,
      417,  418,  419,  416,  419,  413,  512,    0,  420,    0,
      416,  415,  514,  414,  416,  420,  418,  421,    0,  414,
      417,  418,  422,  417,  419,  422,    0,  417,  418,  419,
      416,  419,  421,  517,  424,  420,  425,  421,  427,  514,
        0,    0,  423,  418,  421,  422,  426,  417,  418,  422,
      426,  419,  422,  423,  424,  433,  425,    0,  427,  421,
      517,  424,  423,  425,  421,  427,  428,  430,  428,  423,
      426,  431,  422,  426,  430,  433,  429,  426,  518,    0,
      423,  424,  433,  425,  431,  427,  432,  430,  428,  423,

      429,  431,    0,  428,  430,  428,  429,  426,  431,  435,
      432,  430,  433,  429,  434,  518,  432,  435,  434,  437,
        0,  431,  436,  432,  430,  428,  437,  429,  431,  435,
      436,  438,  439,  429,  438,  519,  435,  432,  434,  437,
        0,  434,  436,  432,  435,  434,  437,  440,  439,  436,
      440,  441,  439,  437,  438,  441,  435,  436,  438,  439,
      443,  438,  519,  520,  444,  434,  437,  440,  442,  436,
      444,  441,  446,  443,  440,  439,  445,  440,  441,  439,
      443,  438,  441,  442,  444,  447,  445,  443,  442,  448,
      520,  444,  446,    0,  440,  442,  445,  444,  441,  446,

      443,  450,  452,  445,  449,  447,  454,  443,    0,  448,
      442,  444,  447,  445,  449,  442,  448,  450,  451,  446,
      453,  450,  452,  445,  449,    0,  454,  451,  450,  452,
      455,  449,  447,  454,  455,  453,  448,    0,  451,    0,
      453,  449,  456,  456,  450,  451,  522,  453,  450,  452,
      455,  449,  457,  454,  451,  460,  457,  455,  458,  523,
      458,  455,  453,  456,  459,  451,  459,  453,  524,  456,
      456,  460,  462,  522,  461,  460,  457,  455,  458,  457,
      463,    0,  460,  457,  459,  458,  523,  458,  462,  461,
      456,  459,  462,  459,  461,  524,    0,  464,  460,  462,

      463,  461,  460,  457,  464,  458,  466,  463,  467,  465,
      468,  459,  525,    0,  469,  462,  461,  464,  469,  462,
      466,  461,  465,  470,  464,    0,  466,  463,  467,  465,
      468,  464,  470,  466,  472,  467,  465,  468,  469,  525,
      471,  469,  472,  470,  464,  469,  527,  466,  474,  465,
      470,  471,  474,  466,  472,  467,  465,  468,    0,  470,
      471,  472,  475,  476,  473,  469,  476,  471,  478,  472,
      470,  473,  474,  527,  480,  474,  479,  475,  471,  474,
      481,  472,  475,  476,  473,  477,  479,  471,  478,  475,
      476,  473,  477,  476,  480,  478,  479,    0,  473,  474,

      481,  480,  482,  479,  475,  477,    0,  481,    0,  475,
      476,  473,  477,  479,  487,  478,  484,  483,  485,  477,
      482,  480,  482,  479,  483,  487,  490,  481,  486,  482,
      491,  484,  477,  485,  487,  486,  484,  483,  485,  488,
        0,  487,    0,  484,  483,  485,  490,  482,  486,  482,
      491,  483,  487,  490,  488,  486,  528,  491,  484,  488,
      485,  487,  486,  484,  483,  485,  488,  489,  529,  492,
      493,    0,  494,  490,  530,  486,  489,  491,  492,  493,
      531,  488,  494,  528,  494,  532,  488,  489,  495,  492,
      493,    0,  494,  497,  489,  529,  492,  493,  495,  494,

      496,  530,  497,  489,  496,  492,  493,  531,  495,  494,
      498,  494,  532,  497,  489,  495,  492,  493,  500,  494,
      497,  499,    0,  499,  496,  495,  498,  496,  533,  497,
      498,  496,  501,    0,    0,  495,  500,  498,  500,  534,
      497,  503,    0,  499,  503,  500,    0,  501,  499,  502,
      499,  496,  501,  498,  535,  533,  538,  498,  502,  501,
      504,  503,  502,  500,  539,  500,  534,  540,  503,  502,
      499,  503,  541,  504,  501,  542,  502,  543,  544,  501,
      504,  535,  546,  538,  547,  502,  550,  504,  503,  502,
      551,  539,  553,  555,  540,  556,  502,  557,  558,  541,

      504,  559,  542,  560,  543,  544,  563,  504,  567,  546,
      561,  547,  569,  550,  571,  572,  572,  551,  573,  553,
      555,  561,  556,  574,  557,  558,  576,  577,  559,  578,
      560,  579,  580,  563,  582,  567,  583,  561,  585,  569,
      586,  571,  572,  572,  587,  573,  588,  589,  561,  590,
      574,  591,  593,  576,  577,  594,  578,  595,  579,  580,
      596,  582,  597,  583,  600,  585,  601,  586,  603,  604,
      605,  587,  606,  588,  589,  607,  590,  608,  591,  593,
      609,  610,  594,  612,  595,  614,  616,  596,    0,  597,
        0,  600,    0,  601,    0,  603,  604,  605,  618,  606,

      620,  619,  607,  621,  608,    0,  622,  609,  610,  624,
      612,  618,  614,  616,  619,  623,    0,  625,  618,  622,
      620,  619,  732,  621,  623,  618,  622,  620,  619,  624,
      621,    0,  627,  622,  628,  623,  624,  625,  618,  626,
      734,  619,  623,  626,  625,  618,  622,  620,  619,  732,
      621,  623,  627,  622,  628,  736,  624,  633,  635,  627,
      630,  628,  623,  626,  625,  629,  626,  734,  630,  629,
      626,  631,  635,  632,  737,  631,    0,  633,  635,  627,
      630,  628,  736,  738,  633,  635,  632,  630,  634,  629,
      626,  631,  629,  632,  636,  630,  629,  636,  631,  635,

      632,  737,  631,  634,  633,  635,    0,  630,  634,  638,
      738,  637,  639,  632,  640,  634,  629,  636,  631,  639,
      632,  636,  640,  739,  636,  642,  637,  641,    0,  638,
      634,  637,  639,  643,  640,  634,  638,  643,  637,  639,
      642,  640,  644,  641,  636,  642,  639,  641,    0,  640,
      739,  740,  642,  637,  641,  644,  638,  643,  637,  639,
      643,  640,  644,  645,  643,  645,  647,  642,  648,  644,
      641,  646,  642,  647,  641,  646,  649,  741,  740,    0,
        0,    0,  644,    0,  643,  645,  647,    0,  648,  644,
      645,  646,  645,  647,  650,  648,  649,  651,  646,    0,

      647,    0,  646,  649,  741,  650,  652,  654,  651,  656,
      653,  654,  645,  647,  650,  648,  655,  651,  646,  657,
      655,  650,  652,  649,  651,  653,  652,    0,  660,  656,
      653,  654,  650,  652,  654,  651,  656,  653,  654,  657,
      655,  650,  661,  655,  651,  658,  657,  655,  660,  652,
      659,  664,  653,  652,  659,  660,  656,  653,  654,  662,
      658,    0,  661,  662,  665,  658,  657,  655,  663,  661,
        0,  664,  658,  665,  659,  660,  666,  659,  664,  663,
        0,  659,  668,  662,  665,  667,  662,  658,  663,  661,
      662,  665,  658,    0,  669,  663,  666,  670,  664,  667,

      665,  659,  668,  666,    0,  667,  663,  669,    0,  668,
      662,  665,  667,    0,  669,  663,  670,  670,  671,  674,
      672,  669,    0,  666,  670,    0,  667,    0,    0,  668,
      676,  671,  667,  672,  669,  673,  742,  673,  671,  674,
      672,  669,    0,  670,  670,  671,  674,  672,  673,  675,
      676,  677,  678,  679,  680,  673,  675,  676,  671,    0,
      672,    0,  673,  742,  673,  671,  674,  672,  679,  675,
      682,  677,  678,  679,  680,  673,  675,  676,  677,  678,
      679,  680,  673,  675,  681,  683,  685,    0,  684,  685,
      682,  681,    0,    0,  686,  679,  675,  682,  677,  678,

      679,  680,  684,  684,  681,  683,  685,  686,  684,    0,
        0,  681,  683,  685,  686,  684,  685,  682,  681,  687,
      688,  686,  688,  689,  690,  691,    0,    0,  692,  684,
      684,  681,  683,  685,  686,  684,  692,  690,  691,  687,
      693,  686,  688,  689,  690,  691,  687,  688,  692,  688,
      689,  690,  691,  694,  695,  692,  696,  694,  695,    0,
      693,    0,    0,  692,  690,  691,  687,  693,  744,  688,
      689,  690,  691,  698,  697,  692,  696,  694,  695,    0,
      694,  695,  697,  696,  694,  695,  698,  693,  701,  700,
      702,  699,  700,  698,  697,  744,  701,    0,    0,  702,

      698,  697,  745,  696,  694,  695,  699,  704,  701,  697,
      702,  699,  700,  698,  746,  701,  700,  702,  699,  700,
      698,  697,  703,  701,  703,  705,  702,  704,  706,  745,
      708,    0,  705,  699,  704,  701,  707,  702,  699,  700,
      707,  746,  710,    0,  703,  705,  711,    0,  706,  703,
      708,  703,  705,    0,  704,  706,  707,  708,  709,  705,
      712,  714,  710,  707,    0,    0,  711,  707,  709,  710,
      713,  703,  705,  711,  712,  706,  747,  708,  709,  721,
      712,  714,  716,  707,  713,  709,    0,  712,  714,  710,
      713,  716,  715,  711,  715,  709,  717,  713,    0,  721,

      718,  712,  716,  747,  718,  709,  721,  712,  714,  716,
      719,  713,  717,  720,  715,  720,  717,  713,  716,  715,
        0,  715,  748,  717,  718,  719,  721,  718,    0,  716,
      719,  718,  749,  720,  723,  722,    0,  719,  722,  717,
      720,  715,  720,  717,  725,  751,  726,  724,  727,  748,
      752,  718,  719,  753,  723,  722,  728,  719,  754,  749,
      720,  723,  722,  724,  725,  722,  726,  724,  727,  755,
      728,  725,  751,  726,  724,  727,  728,  752,  756,  757,
      753,  723,  722,  728,  758,  754,  759,  760,  763,  764,
      724,  725,  766,  726,  724,  727,  755,  728,  769,  772,

      773,  774,  775,  728,  774,  756,  757,  780,  781,  782,
      783,  758,  784,  759,  760,  763,  764,  787,  788,  766,
      789,  790,  791,  793,  794,  769,  772,  773,  774,  775,
      795,  774,  796,  797,  780,  781,  782,  783,  798,  784,
      799,  800,  801,  802,  787,  788,  803,  789,  790,  791,
      793,  794,  804,  806,  807,  808,  810,  795,  811,  796,
      797,  812,    0,    0,  816,  798,  817,  799,  800,  801,
      802,    0,  819,  803,  818,    0,  820,  821,  822,  804,
      806,  807,  808,  810,  816,  811,  817,  826,  812,  823,
      823,  816,  819,  817,  818,  818,  820,  821,  822,  819,

      825,  818,  826,  820,  821,  822,  824,  826,  824,  825,
      823,  816,  828,  817,  826,    0,  823,  823,  829,  819,
      825,  818,  818,  820,  821,  822,  902,  825,  824,  826,
      827,  832,  828,  824,  826,  824,  825,  823,  829,  828,
      827,  832,  830,  835,  831,  829,  830,  825,  831,    0,
      827,  832,  833,  902,  834,  824,  833,  827,  832,  828,
      836,  834,  904,  835,  831,  829,  830,  827,  832,  830,
      835,  831,    0,  830,  834,  831,  833,  827,  832,  833,
      836,  834,  837,  833,  838,  839,  837,  836,  834,  904,
      835,  831,    0,  830,  839,  840,  841,    0,    0,  838,

      844,  834,  837,  833,  838,  839,    0,  836,  905,  837,
      842,  838,  839,  837,  844,  840,  841,    0,  843,  847,
      844,  839,  840,  841,  845,  842,  838,  844,  845,  837,
      842,  838,  839,  843,  846,  905,  846,  842,  843,  847,
        0,  844,  840,  841,  845,  843,  847,  844,  848,  849,
      851,  845,  842,    0,  906,  845,  846,  842,  907,  853,
      843,  846,  854,  846,  849,  843,  847,  850,  848,  849,
      851,  845,  856,  855,  850,  848,  849,  851,  852,  853,
      852,  906,  854,  846,  857,  907,  853,  850,  855,  854,
        0,  849,  856,  855,  850,  848,  849,  851,  852,  856,

      855,  850,  858,  859,  857,  852,  853,  852,    0,  854,
        0,  857,  909,  862,  850,  855,  863,  858,  860,  856,
      855,  861,  858,  859,  911,  852,  864,  865,  861,  858,
      859,  857,  860,  862,    0,  860,  863,  866,  860,  909,
      862,  861,    0,  863,  858,  860,  864,  865,  861,  858,
      859,  911,  867,  864,  865,  861,  871,  866,  869,  860,
      862,  869,  860,  863,  866,  860,  867,  868,  861,  872,
        0,  868,  867,  864,  865,  870,  871,  873,  869,  867,
        0,  876,    0,  871,  866,  869,    0,  874,  869,  872,
      870,  868,    0,  867,  868,  870,  872,  873,  868,  867,

      874,  876,  870,  871,  873,  869,  875,  874,  876,  877,
      878,  879,    0,  877,  874,  879,  872,  870,  868,  875,
        0,  880,  870,  912,  873,  880,  875,  874,  876,  877,
      878,  913,    0,  875,  874,  879,  877,  878,  879,  882,
      877,    0,  879,  881,  881,  880,  875,  883,  880,  914,
      912,  883,  880,  875,  882,    0,  877,  878,  913,  882,
      887,  885,  879,  886,  881,  885,  882,  883,  884,  884,
      881,  881,  880,  887,  883,    0,  914,  886,  883,  915,
      887,  882,  888,  886,    0,  885,  882,  887,  885,  884,
      886,  881,  885,  891,  883,  884,  884,  888,    0,  889,

      887,  890,  888,  889,  886,  890,  915,  887,    0,  888,
      886,  892,  885,  891,  893,  893,  884,  894,    0,  895,
      891,  917,    0,  889,  888,  890,  889,    0,  890,  888,
      889,  892,  890,  896,  899,  893,  900,  894,  892,  895,
      891,  893,  893,  919,  894,  897,  895,  896,  917,  897,
      889,  898,  890,  896,  899,  898,  900,  923,  892,  925,
      896,  899,  893,  900,  894,  926,  895,  932,  933,  897,
      919,  934,  897,  936,  896,  898,  897,  938,  898,  939,
      896,  899,  898,  900,  923,  941,  925,  942,  943,  945,
      946,  947,  926,  948,  932,  933,  897,  950,  934,  952,

      936,  954,  898,  955,  938,  956,  939,  957,  962,  963,
        0,  965,  941,  966,  942,  943,  945,  946,  947,    0,
      948,  968,    0,  971,  950,  970,  952,  969,  954,  973,
      955,  965,  956,  966,  957,  962,  963,  967,  965,  970,
      966,  968,  969,  971,    0,  970,  967,  969,  968,  973,
      971,  974,  970,    0,  969,  972,  973,  967,  965,  975,
      966,  976,  972,  976,  967,  974,  970,  975,  968,  969,
      971,  974,  970,  967,  969,  972,  973,  979,  974,  975,
      977,  978,  972,  976,  967,    0,  975,  977,  976,  972,
      976,  981,  974,  982,  975,  982,  978,  979,  974,  983,

      977,  978,  972, 1031,  979,    0,  975,  977,  978,  980,
      976,  981,  980,  984,  977,  982,    0,  985,  981,  983,
      982,  986,  982,  978,  979,  987,  983,  977,  978,  990,
     1031,  991,  980,  984,  988,  989,  980,  985,  981,  980,
      984,  986,  982,  988,  985,  987,  983,  992,  986,  990,
      989,  991,  987,  993,  988,  989,  990,    0,  991,  980,
      984,  988,  989,  994,  985,  996,  995,  992,  986,  998,
      988,  997,  987,  993,  992,  997,  990,  989,  991,  995,
      993,  988,  989,  994, 1000,  996,  995,  999, 1003,  998,
      994,    0,  996,  995,  992,  997,  998,    0,  997, 1002,

      993,  999,  997, 1002, 1000, 1004,  995,  999, 1003, 1005,
      994, 1000,  996,  995,  999, 1003,  998, 1001, 1006, 1007,
     1004, 1034,  997, 1002, 1001, 1004, 1002,    0,  999, 1005,
     1002, 1000, 1004, 1012,  999, 1003, 1005, 1001, 1006, 1007,
     1008, 1009, 1008, 1009, 1001, 1006, 1007, 1004, 1034,    0,
     1002, 1001, 1004, 1012, 1014,    0, 1005, 1010, 1011, 1016,
     1012,    0, 1008, 1009, 1001, 1006, 1007, 1008, 1009, 1008,
     1009, 1010, 1011, 1013, 1014, 1035, 1015, 1010, 1011, 1016,
     1012, 1014, 1013, 1015, 1010, 1011, 1016, 1017, 1018, 1008,
     1009, 1017, 1018, 1013,    0, 1019, 1015, 1019, 1010, 1011,

     1013, 1014, 1035, 1015, 1010, 1011, 1016, 1021, 1036, 1013,
     1015, 1017, 1018, 1020, 1017, 1018, 1022, 1019, 1017, 1018,
     1013, 1023, 1019, 1015, 1019, 1024, 1039, 1021, 1020, 1025,
     1026, 1040, 1045, 1020, 1021, 1036, 1022, 1026, 1017, 1018,
     1020, 1023, 1025, 1022, 1019, 1024, 1046, 1049, 1023, 1025,
     1026, 1050, 1024, 1039, 1021, 1020, 1025, 1026, 1040, 1045,
     1020, 1053, 1054, 1022, 1026, 1057, 1059, 1060, 1023, 1025,
     1061, 1062, 1024, 1046, 1049, 1066, 1025, 1026, 1050, 1067,
     1068, 1069,    0, 1070, 1071, 1072,    0,    0, 1053, 1054,
        0, 1104, 1057, 1059, 1060, 1066, 1073, 1061, 1062, 1067,

     1068, 1069, 1066, 1070, 1071, 1072, 1067, 1068, 1069, 1074,
     1070, 1071, 1072, 1074, 1075, 1076, 1073, 1077, 1104, 1079,
        0,    0, 1066, 1073, 1107, 1080, 1067, 1068, 1069, 1081,
     1070, 1071, 1072, 1074, 1075, 1076, 1074, 1077, 1078, 1079,
     1074, 1075, 1076, 1073, 1077, 1080, 1079, 1082, 1083, 1081,
     1083, 1107, 1080, 1078,    0,    0, 1081,    0, 1078, 1085,
     1074, 1075, 1076, 1086, 1077, 1078, 1079, 1082, 1087, 1088,
     1083, 1084, 1080, 1089, 1082, 1083, 1081, 1083, 1084, 1085,
     1078, 1087, 1090, 1086, 1091, 1078, 1085, 1110, 1087, 1088,
     1086, 1084, 1093, 1089, 1082, 1087, 1088, 1083, 1084, 1091,

     1089, 1092, 1090, 1094, 1091, 1084, 1085, 1092, 1087, 1090,
     1086, 1091, 1093, 1096, 1110, 1087, 1088, 1095, 1084, 1093,
     1089, 1092, 1097, 1094,    0, 1100, 1091, 1101, 1092, 1090,
     1094, 1091, 1095, 1096, 1092, 1097, 1099, 1095, 1098, 1093,
     1096, 1102, 1097, 1113, 1095, 1100, 1098, 1101, 1092, 1097,
     1094, 1099, 1100, 1117, 1101, 1118, 1099, 1119, 1098, 1095,
     1096, 1102, 1097, 1099, 1095, 1098, 1122, 1123, 1102, 1097,
     1113, 1124, 1100, 1098, 1101, 1125, 1126, 1127, 1099, 1122,
     1117, 1129, 1118, 1099, 1119, 1098, 1122, 1123, 1102, 1130,
     1125, 1124, 1128, 1122, 1123, 1125, 1126, 1127, 1124,    0,

     1141, 1129, 1125, 1126, 1127, 1132, 1122, 1128, 1129, 1130,
     1133, 1134, 1128, 1122, 1123, 1135, 1130, 1125, 1124, 1128,
     1131, 1143, 1125, 1126, 1127, 1132, 1138, 1141, 1129, 1146,
     1133, 1134, 1132, 1131, 1128, 1135, 1130, 1133, 1134, 1128,
     1131, 1137, 1135, 1136, 1149, 1137, 1138, 1131, 1143, 1148,
     1148, 1159, 1132, 1138, 1136, 1150, 1146, 1133, 1134,    0,
     1131, 1137, 1135, 1136, 1149, 1151, 1152, 1131, 1137, 1153,
     1136, 1149, 1137, 1138, 1148, 1150, 1166, 1154, 1159, 1151,
     1162, 1136, 1150, 1156, 1156, 1151, 1152, 1154, 1137, 1153,
     1136, 1149, 1151, 1152, 1148, 1163, 1153, 1154, 1161, 1161,

     1162, 1148, 1150, 1166, 1154, 1169, 1151, 1162, 1164, 1170,
     1172, 1174, 1151, 1152, 1154, 1163, 1153, 1164, 1176, 1178,
     1180, 1148, 1163, 1182, 1154, 1156, 1184, 1162, 1164, 1170,
     1186, 1188, 1169, 1190,    0, 1164, 1170, 1172, 1174,    0,
     1161,    0, 1163,    0, 1164, 1176, 1178, 1180,    0,    0,
     1182,    0, 1156, 1184,    0, 1164, 1170, 1186, 1188,    0,
     1190,    0,    0,    0,    0,    0,    0, 1161, 1202, 1202,
     1202, 1202, 1202, 1203,    0,    0, 1203, 1203, 1205, 1205,
     1205,    0, 1205, 1206,    0, 1206, 1206, 1206, 1207,    0,
     1207, 1207, 1207, 1208,    0, 1208, 1208, 1208, 1201, 1201,

     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;


/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1936 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * _out_str ,yyscan_t yyscanner );

			int hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int _line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int _column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 2224 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1202 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1201 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(CHARACTER_VARYING)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 153:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 160:
#line 226 "flex_lexer.l"
case 161:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
{
  yylval->fval = atof(yytext);
  return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 162:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
{
  yylval->ival = LLONG_MIN;
  return SQL_INTVAL;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 241 "flex_lexer.l"
{
  errno = 0;
  yylval->ival = strtoll(yytext, nullptr, 0);
  if (errno) {
    return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
    return 0;
  }
  return SQL_INTVAL;
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 251 "flex_lexer.l"
{
  // Crop the leading and trailing quote char
  yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 257 "flex_lexer.l"
{
  yylval->sval = strdup(yytext);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 262 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 263 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 264 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 265 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 266 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 268 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 270 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3164 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1202 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1202 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
	yy_is_jam = (yy_current_state == 1201);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc((yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void hsql_set_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 270 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

