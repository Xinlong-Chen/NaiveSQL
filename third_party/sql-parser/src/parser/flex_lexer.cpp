#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 1
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yynoreturn yy_fatal_error (yyconst char* msg ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 171
#define YY_END_OF_BUFFER 172
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1194] =
    {   0,
        0,    0,  168,  168,    2,    2,  172,  170,    4,    4,
      170,  170,  159,  166,  159,  159,  163,  159,  159,  159,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  159,  168,  169,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  154,    0,    1,    0,
      161,  160,  163,  156,  155,  153,  157,  165,  165,  165,

      165,  165,  165,  124,  165,  125,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      126,  165,  165,  127,  128,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  129,  130,  131,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  132,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  158,  168,  167,
        2,    2,    2,    2,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  164,    0,  160,  112,  165,  113,
      165,  165,  114,  165,  115,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  136,  165,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  116,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  117,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  118,  165,  165,  119,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  120,  165,  165,
      121,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  122,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  123,  165,  165,  165,  165,
      165,    5,  165,  165,  165,  165,  165,  165,  165,  165,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    0,  165,  165,  165,
      165,  165,  165,  165,   83,  165,   84,   46,   85,  165,
      165,  165,   86,  165,  165,   87,  142,  165,  165,  165,
      165,  165,   89,  165,  165,  165,   90,   91,  165,  165,
      165,  165,  165,  165,  165,   92,  165,  165,   93,   94,
      165,  165,   95,  165,   96,  135,  165,  165,  165,  165,
      165,  165,   97,  165,   98,   99,  100,  165,  102,  165,
      103,  165,  165,  165,  165,  104,  165,  165,  165,  165,
      165,  105,  165,  165,   33,  165,  165,  165,  165,  165,
      165,  165,  106,  165,  165,  165,  165,  165,  107,  108,

       31,  165,  145,  165,  165,  165,  165,  165,  165,  165,
      165,  109,  165,  110,  165,  111,  138,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,   63,
       64,  165,   65,  165,  148,  165,  165,  165,  165,  165,
      165,  165,   66,  165,  165,  165,  165,  165,   67,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  146,
       68,  165,  165,   69,  165,  141,  101,  165,   70,   71,
      165,  165,  165,  165,   72,   73,   74,   75,  165,  137,
      165,  165,  165,   76,   77,  165,  165,  165,  165,  165,
       78,  165,  165,  165,  165,  165,  165,  165,   79,  165,

      165,  165,  165,   80,  165,  165,  165,   81,  165,  165,
      165,   82,  144,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,  165,

       36,  165,  165,  165,   37,  150,  165,   38,  165,  165,
      165,  165,   39,  165,   40,  165,   41,   42,   43,  165,
       44,  165,  165,   47,   48,   49,   50,   51,  165,  165,
      165,   52,  134,  143,  165,  165,   53,  165,  165,  165,
       54,  165,  165,   55,  133,   56,  165,   57,  165,   58,
      165,  165,  165,  165,   59,   60,   61,   62,  165,  165,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,   16,   17,   18,  165,   19,   20,  165,
      165,   32,   21,  165,  165,   22,   23,   45,   24,  165,
      165,  140,   25,  165,  165,   26,   27,  165,  165,   28,
      139,  165,   29,  165,  165,  165,  165,   30,   35,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,  165,   88,  165,

       11,   12,  165,  151,   13,  165,   14,  149,   34,  165,
      165,  165,   15,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,  165,  165,    8,  165,    9,   10,  165,    2,    2,
        2,    2,    2,    2,    2,    2,    0,    0,    6,    7,
      165,    2,    2,    2,    2,    2,    0,    0,  147,    2,
        2,    2,    0,    0,    2,    2,    0,    0,    2,    2,
        0,    0,    2,    2,    0,    0,    2,    2,    0,    0,
        2,    2,    0,  152,    2,    2,    0,    2,    0,    2,
      162,    2,    0

    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,    6,    6,   20,
       21,   22,    6,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        6,    1,    6,    6,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    6,   76,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static yyconst flex_uint16_t yy_base[1201] =
    {   0,
        0,    0,  582,  581,   76,    0,  581, 4745,  151,  153,
      552,    0, 4745, 4745,  149,  148,  160,  159,  547,  535,
      156,  156,  164,  162,  172,  223,  198,  211,  215,  151,
      168,  210,  255,  257,  263,  262,    0,  277,  317,  360,
      296,  221,  258,  171,  477,    0,  545,    0,  295,  308,
      516,  531,    0,    0,  317,  418,  429,  317,  500,  499,
      448,  524,  578,  630,  678,  730,  338,  436,  778,  330,
      319,  349,  444,  830,  878,  500,  321,  511,  928,  980,
      556,  512,  533,  431,  441,  347, 4745,  508, 4745,  500,
     1045, 1055, 1066, 4745, 4745, 4745, 4745,    0,  174,  253,

      438,  469,  284,  318,  567,    0,  538,  339,  578,  361,
      591,  621,  607,  417,  429,  436,  453,  489,  641,  515,
      521,  520,  537,  556,  568,  590,  594,  659,  601,  608,
        0,  628,  625,  675,  633,  650,  644,  674,  674,  697,
      673,  679,  685,  681,  689,  701,  722,  726,    0,  729,
      714,  719,  740,  738,  766,  737,  734,  741,  776,  739,
      776,  768,  786,  787,  785,  788,  782,  783,  800,  793,
      796,  828,  822,  836,  833,  819,  841, 4745,    0, 4745,
        0,  399,    0,  492,    0,  484, 1076, 1086, 1097,    0,
        0,    0,    0,  838,  869,  866,  900,  923,  870,  932,

      967,  882,  971, 1094, 1142, 1091,  977, 1194, 1092, 1093,
     1127, 1146, 1096, 1159, 1244,  954, 1191, 1200, 1196, 1229,
     1226, 1230, 1252, 1270, 1125, 1258, 1155, 1261, 1283, 1332,
     1293, 1296, 1185, 1306, 1336, 1366, 1357, 1345, 1367, 1380,
     1390, 1399, 1415, 1420, 1204, 1424, 1416, 1439, 1434, 1445,
     1460, 1468, 1478, 1490, 1484, 1503, 1528, 1514, 1533, 1519,
     1544, 1522, 1557, 1547, 1582, 1593, 1588, 1599, 1621, 1618,
     1596, 1617, 1651,    0, 4745,  453, 1696,    0,  844,    0,
      845,  841,    0,  888,    0,  914,  929,  917,  930, 1675,
      932,  970,  981,  984, 1077, 1103, 1088, 1103, 1090, 1101,

     1140, 1160, 1568, 1172, 1188, 1192, 1271, 1287, 1312,    0,
     1326, 1324, 1330, 1347, 1375, 1372, 1384, 1401, 1477, 1467,
     1486, 1501, 1535, 1529, 1559, 1602, 1597, 1609, 1630, 1632,
     1650, 1662, 1666, 1691, 1651, 1661,    0, 1657, 1676, 1688,
     1696, 1700, 1702, 1703, 1690, 1692, 1692,    0, 1702, 1697,
     1697, 1712, 1713, 1718, 1706, 1705, 1712, 1714, 1728, 1710,
     1723, 1720, 1729, 1720, 1744,    0, 1727, 1739, 1734, 1735,
     1748, 1747, 1744, 1751, 1761,    0, 1753, 1765, 1754, 1753,
     1771,    0, 1759, 1753, 1772, 1757, 1763, 1770, 1777, 1768,
        0,  452, 1828, 1803, 1804, 1809, 1821, 1825, 1822, 1837,

     1826, 1834, 1835, 1847, 1863, 1878, 1875, 1880, 1879, 1889,
     1891, 1912, 1928, 1913, 1929, 1917, 1930, 1945, 1947, 1973,
     1958, 1981, 1982, 1984, 1963, 1987, 2016, 1997, 2015, 2018,
     2026, 2037, 2027, 2049, 2052, 2058, 2080, 2082, 2070, 2071,
     2083, 2104, 2106, 2112, 2122, 2134, 2120, 2123, 2136, 2158,
     2146, 2177, 2137, 2145, 2174, 2176, 2191, 2179, 2208, 2212,
     2200, 2225, 2230, 2209, 2242, 2231, 2234, 2233, 2263, 2268,
     2265, 2282, 2279, 2296, 2298, 2304, 2308, 2327, 2313, 2322,
     2317, 2336, 2348, 2350, 2352, 2358, 2381, 2371, 2387, 2403,
     2386, 2390, 2411, 2416, 2441, 2422, 2444, 2435, 2445, 2457,

     2476, 2475, 2470, 2498, 2486, 2508,  449, 1787, 1845, 1899,
     1933, 1990, 2083, 2111,    0, 2192,    0,    0, 2274, 2345,
     2358, 2352,    0, 2404, 2407, 2441,    0, 2453, 2491, 2489,
     2494, 2514, 2501, 2517, 2515, 2517,    0,    0, 2516, 2518,
     2514, 2516, 2543, 2544, 2543,    0, 2529, 2551,    0,    0,
     2553, 2539,    0, 2543,    0, 2539, 2559, 2547, 2542, 2549,
     2550, 2562,    0, 2558,    0,    0,    0, 2553,    0, 2562,
        0, 2572, 2567, 2570, 2565,    0, 2585, 2584, 2572, 2580,
     2586,    0, 2601, 2602,    0, 2593, 2590, 2589, 2609, 2599,
     2604, 2616,    0, 2608, 2616, 2613, 2618, 2609,    0,    0,

     2608, 2609,    0, 2628, 2618, 2613, 2636, 2620, 2634, 2637,
     2635,    0, 2623,    0, 2647,    0, 2634,  448, 2657, 2658,
     2652, 2660, 2668, 2673, 2669, 2683, 2694, 2686, 2691, 2723,
     2724, 2722, 2727, 2725, 2748, 2762, 2758, 2737, 2779, 2788,
     2777, 2787, 2798, 2817, 2833, 2812, 2841, 2822, 2827, 2851,
     2852, 2850, 2867, 2885, 2895, 2856, 2884, 2886, 2896, 2900,
     2910, 2921, 2925, 2926, 2929, 2934, 2950, 2935, 2958, 2940,
     2975, 2979, 2994, 2983, 2993, 2984, 2989, 3008, 3017, 3018,
     3042, 3033, 3043, 3052, 3048, 3061, 3057, 3085, 3071, 3087,
     3096, 3111, 3086, 3121, 3129, 3115, 3120, 3137, 3139, 3163,

     3145, 3169, 3173, 3174, 3175, 3179, 3203, 3188, 3204, 3191,
     3212, 3213, 3228, 3217, 3245, 3247, 3246, 3257, 3261, 3285,
     3271, 3279, 3290, 3295, 3296, 3300, 3301, 3319,  438,    0,
        0, 2680,    0, 2702,    0, 2712, 2735, 2758, 2756, 2786,
     2801, 2819,    0, 2920, 2929, 2978, 3005, 3029,    0, 3042,
     3082, 3094, 3170, 3225, 3221, 3271, 3283, 3298, 3309,    0,
        0, 3310, 3323,    0, 3329,    0,    0, 3320,    0,    0,
     3321, 3340, 3327, 3338,    0,    0,    0,    0, 3349, 3336,
     3355, 3350, 3339,    0,    0, 3355, 3343, 3346, 3361, 3360,
        0, 3369, 3373, 3371, 3358, 3370, 3376, 3383, 3370, 3372,

     3372, 3393, 3394,    0, 3393, 3395, 3395,    0, 3384, 3403,
     3407,    0,    0,  413, 3404, 3407, 3408, 3413, 3418, 3419,
     3423, 3437, 3449, 3432, 3458, 3461, 3462, 3467, 3486, 3483,
     3495, 3492, 3477, 3501, 3507, 3516, 3532, 3529, 3535, 3545,
     3546, 3537, 3570, 3569, 3571, 3575, 3585, 3599, 3583, 3609,
     3604, 3608, 3625, 3614, 3623, 3639, 3637, 3648, 3653, 3649,
     3658, 3663, 3671, 3674, 3679, 3707, 3708, 3682, 3712, 3713,
     3716, 3731, 3737, 3722, 3741, 3746, 3756, 3774, 3782, 3765,
     3786, 3796, 3791, 3805, 3815, 3824, 3830, 3840, 3800, 3834,
     3849, 3845, 3858, 3859, 3868, 3874, 3882, 3883,  405, 3415,

        0, 3439, 3453, 3508, 3539,    0, 3579,    0, 3607, 3622,
     3670, 3673,    0, 3751,    0, 3764,    0,    0,    0, 3804,
        0, 3801, 3865,    0,    0,    0,    0,    0, 3871, 3889,
     3894,    0, 3879,    0, 3891, 3903,    0, 3889, 3908, 3892,
        0, 3915, 3916, 3904, 3905,    0, 3913,    0, 3916,    0,
     3928, 3931, 3930, 3917,    0,    0,    0,    0, 3920, 3927,
      404, 3936, 3937, 3938, 3942, 3952, 3966, 3948, 3970, 3971,
     3988, 4002, 4005, 4001, 4006, 4014, 4010, 4042, 4024, 4036,
     4045, 4046, 4050, 4055, 4059, 4058, 4060, 4068, 4076, 4084,
     4099, 4090, 4098, 4100, 4108, 4109, 4133, 4134, 4124, 4143,

     4132, 4142, 4148, 4166, 4174, 4178, 4182, 4177, 4206, 4183,
     4200, 4208, 4216, 4218, 4246, 4237, 4231, 4240, 4248, 4249,
     4261, 4270,  408,    0,    0,    0, 3976,    0,    0, 3982,
     3996,    0,    0, 4020, 4039,    0,    0,    0,    0, 4116,
     4131,    0,    0, 4171, 4232,    0,    0, 4241, 4256,    0,
        0, 4257,    0, 4267, 4274, 4270, 4286,    0,    0,  407,
     4291, 4294, 4300, 4302, 4303, 4305, 4306, 4319, 4316, 4324,
     4328, 4345, 4334, 4337, 4356, 4358, 4369, 4370, 4359, 4368,
     4380, 4382, 4391, 4399, 4408, 4424, 4412, 4413, 4421, 4422,
     4434, 4445, 4458, 4456, 4462, 4464,  406, 4322,    0, 4359,

        0,    0, 4383,    0,    0, 4397,    0,    0,    0, 4423,
     4441, 4462,    0,  401, 4475, 4467, 4486, 4477, 4490, 4512,
     4496, 4498, 4521, 4499, 4520, 4529, 4530, 4531, 4560, 4535,
      393,  406, 4536,    0, 4524,    0,    0, 4534,  350, 4597,
     4566, 4574, 4575, 4579, 4583, 4588,  344, 4629,    0,    0,
     4575,  342, 4643, 4600, 4609, 4614,  338, 4589,    0,  335,
     4632, 4631,  330, 4619,  325, 4624,  306, 4618,  303, 4619,
      288, 4636,  255, 4638,  250, 4634,  245, 4636,  243, 4646,
      240, 4647,  235, 4745,  221,    0,  226,  197,  187,  173,
     4745,    0, 4745, 4714, 4719,  181, 4724, 4729, 4734, 4739

    } ;

static yyconst flex_int16_t yy_def[1201] =
    {   0,
     1193,    1, 1194, 1194, 1193,    5, 1193, 1193, 1193, 1193,
     1193, 1195, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1193, 1197, 1193, 1198, 1198, 1193,
     1198, 1199, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
     1200, 1200,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1198, 1193, 1193, 1195, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1196, 1196, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1193, 1197, 1193,
     1198, 1198, 1198, 1199, 1198, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1198,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62, 1198, 1193, 1193, 1193, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1198, 1198, 1198,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62, 1193, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1198,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1193, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1198,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1193, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1198,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1193, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1198,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1193, 1196, 1196, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1198,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1193, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1198,   62,
       62,   62,   62,   62,   62,   62, 1193, 1193, 1196, 1196,
     1196, 1198, 1198,   62,   62,   62, 1193, 1193, 1196, 1198,
     1198,   62, 1193, 1193, 1198, 1198, 1193, 1193, 1198, 1198,
     1193, 1193, 1198, 1198, 1193, 1193, 1198, 1198, 1193, 1193,
     1198, 1198, 1193, 1193, 1198, 1198, 1193, 1198, 1193, 1198,
     1193, 1198,    0, 1193, 1193, 1193, 1193, 1193, 1193, 1193

    } ;

static yyconst flex_uint16_t yy_nxt[4822] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   37,   44,   37,    8,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   37,   44,   37,   45,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   58,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   77,   84,   77,   48,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   77,   84,
       77,   85,   86,   86,   86,   86,   89,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   90,   92,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   94,
       95,   99,  105,  100,  111,   98,  107,  136,  112,  101,
     1192,  102,  113,  108,  137,  103,  104,  177,  114,  278,

      109,  115,  106,  110, 1191,  116, 1190,  117,   99,  105,
      100,  111,  118,  107,  136,  112,  101,  119,  102,  113,
      108,  137,  103,  104,  177,  114,  278,  109,  115,  106,
      110,  126,  116,  128,  117, 1189,  138,  127, 1188,  118,
      139,  129,  131,  173,  119,  120,  140,  130,  132,  133,
      134,  174, 1187,  121, 1185,  135,  122, 1183,  126,  123,
      128, 1181,  124,  138,  127,  125, 1179,  139,  129,  131,
      173, 1177,  120,  140,  130,  132,  133,  134,  174,  144,
      121,  141,  135,  122,  152,  142,  123,  175,  176,  124,
      148,  143,  125,  145,  279,  153,  182,   86,  149,  146,

      147,  154,  150,  155, 1175,  151,  144,  156,  141,   86,
       86,  152,  142,  157,  175,  176, 1173,  148,  143, 1171,
      145,  279,  153,  284,  185,  149,  146,  147,  154,  150,
      155,  170,  151,  171,  156,  186,  172,  190,  191, 1169,
      157,  158,  285,  159, 1167,  233,  160,  194,   86,   86,
      284,  161, 1165,  162,  163, 1163,  194, 1160,  170, 1157,
      171,  291, 1152,  172,  194,  194,  232,  194,  158,  285,
      159,  222,  233,  160,  194,  234,  194,  223,  161,  235,
      162,  163,  164,  194,  194,  236,  165,  296,  291,  166,
      167,  194,  194,  232,  194,  194,  168,  297,  222,  169,

      182,   86,  234,  194,  223, 1147,  235, 1148, 1148,  164,
     1139,  194,  236,  165,  296, 1131,  166,  167, 1114, 1097,
     1060, 1023,  194,  168,  297,  961,  169,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  188,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  181,  181,
      899,  181,  181,  181,  181,  181,  181,  273,  224,  307,
      814,  729,  194,  618,  507,  308,  225,  181,  181,  181,
      237,  280,  226,  195,  238,  196,  309,  194,  310,  281,
      239,  197,  194,  198,  273,  224,  307,  199,  200,  194,
      194,  282,  308,  225,  283,  392,  391,  237,  280,  226,

      195,  238,  196,  309,  194,  310,  281,  239,  197,  194,
      198,  276,  275,  311,  199,  200,  274,  194,  282,  193,
      192,  283,  248,  181,  181,  181,  194,  181,  181,  181,
      181,  181,  181,  249,  269,  181,  183,  251,  194,  250,
      311,  252,  270,  181,  181,  181,  194,  253,  317,  248,
      201,  180,  178,  194,  318,   97,  319,  194,  194,  194,
      249,  269,  271,  272,  251,  194,  250,   96,  252,  270,
      202,  289,   87,  194,  253,  317,  320,  201,  290,  194,
     1193,  318,  194,  319,  194,  194,  194,   47,   47,  271,
      272,  266,  321,  267,  286,  287,  268,  202,  289,  181,

      203,  322,  194,  320,  194,  290,  194,  204,  288,  194,
     1193,  292,  293,  294,  205,  295, 1193,  206,  266,  321,
      267,  286,  287,  268,  194, 1193,  323,  203,  322,  194,
      324,  194,  298, 1193,  204,  288,  327,  299,  292,  293,
      294,  205,  295,  300,  206,  301,  305,  306,  302, 1193,
      328,  194,  207,  323,  303, 1193,  208,  324,  329,  298,
      209,  304,  330,  327,  299,  312,  210,  313,  335,  211,
      300,  314,  301,  305,  306,  302,  194,  328,  315,  207,
      336,  303,  316,  208, 1193,  329, 1193,  209,  304,  330,
      337, 1193,  312,  210,  313,  335,  211, 1193,  314,  325,

      331,  338,  326,  194,  194,  315,  339,  336,  340,  316,
      332,  212,  344,  213,  345,  333,  334,  337,  214,  341,
      346,  342,  347,  215,  194, 1193,  325,  331,  338,  326,
      348,  194,  343,  339,  349,  340, 1193,  332,  212,  344,
      213,  345,  333,  334,  350,  214,  341,  346,  342,  347,
      215,  194,  216,  351,  352,  353,  194,  348,  354,  343,
      217,  349,  355,  218,  356,  361,  219,  362,  357,  220,
      363,  350,  221, 1193, 1193,  367,  194, 1193, 1193,  216,
      351,  352,  353,  194, 1193,  354, 1193,  217,  358,  355,
      218,  356,  361,  219,  362,  357,  220,  363,  368,  221,

      364,  359,  367,  194,  194,  227,  360,  369,  370,  365,
      371,  228,  229,  230,  374,  358,  375,  366,  231,  372,
      376,  381,  377,  379,  194,  368,  380,  364,  359, 1193,
      373,  194,  227,  360,  369,  370,  365,  371,  228,  229,
      230,  374,  378,  375,  366,  231,  372,  376,  381,  377,
      379,  194,  240,  380,  382,  384,  194,  373,  383,  388,
      389,  385,  386,  390,  194, 1193,  241, 1193, 1193,  378,
      508,  509,  242,  243,  510,  387,  194, 1193, 1193,  240,
     1193,  382,  384,  194,  194,  383,  388,  389,  385,  386,
      390,  194,  194,  241,  394,  194,  194,  508,  509,  242,

      243,  510,  387,  194,  194,  244, 1193,  395,  194,  400,
      511,  194,  194,  245, 1193,  194,  194,  246, 1193,  194,
      247,  394,  194,  194,  194, 1193,  194, 1193,  194, 1193,
     1193,  194,  244,  396,  395,  194,  400,  511, 1193,  194,
      245,  397,  194,  194,  246,  398,  194,  247,  399,  194,
      512,  194,  254,  194,  255,  194,  401,  256,  194,  513,
      396,  514,  257,  515,  258,  259, 1193, 1193,  397,  194,
     1193,  519,  398,  194,  194,  399,  194,  512,  194,  254,
      194,  255, 1193,  401,  256,  194,  513,  433,  514,  257,
      515,  258,  259,  194,  402,  403,  194,  194,  519, 1193,

      194,  194,  260,  194,  405,  194,  261,  194,  404,  262,
      263,  406,  520,  194,  433,  521,  264,  194,  414,  265,
      194,  402,  403,  415,  194,  522,  194,  194, 1193,  260,
      194,  405, 1193,  261, 1193,  404,  262,  263,  406,  520,
      194, 1193,  521,  264,  194,  414,  265, 1193, 1193, 1193,
      415, 1193,  522,  194,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,   92,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  393,  393,  393,  393,  393,

      393,  393,  393,  393,  393,  188,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  407,  412,  194,  194,
      194,  426,  194,  523, 1193,  524, 1193,  413,  525,  526,
      527,  421,  422, 1193,  528,  423, 1193,  194,  194,  194,
      194, 1193,  194,  407,  412,  194,  194,  194,  426,  194,
      523,  194,  524,  194,  413,  525,  526,  527,  421,  422,
      443,  528,  423,  424,  194,  194,  194,  194,  194,  194,
      529,  194,  194,  194, 1193,  408,  409,  410,  194,  411,
      194,  194,  530,  427, 1193,  194,  425,  443,  194, 1193,
      424, 1193,  194, 1193, 1193,  194,  533,  529,  194,  194,

      194,  194,  408,  409,  410,  194,  411, 1193,  194,  530,
      427,  194,  194,  425,  534,  194,  416,  194,  417,  194,
      194,  418,  194,  533,  434, 1193,  194,  419,  194, 1193,
      194,  453,  194,  535,  420,  436,  435,  194,  194, 1193,
      194,  534,  194,  416,  194,  417,  194,  194,  418,  194,
      194,  434,  194,  194,  419,  194,  194,  194,  453,  438,
      535,  420,  436,  435,  194,  437,  439,  194,  428,  194,
      429, 1193,  194,  194,  430,  194,  194,  194,  194,  194,
     1193,  431,  194,  194,  194,  432,  438,  194,  440, 1193,
      194,  445,  437,  439,  536,  428,  194,  429,  194,  194,

      444,  430,  194,  194,  194,  194, 1193,  194,  431,  194,
      441,  194,  432,  442,  194,  440,  194,  194,  445,  194,
      446,  536,  194,  194,  537,  194,  452,  444,  451,  194,
     1193,  194,  194,  454,  194, 1193,  194,  441,  538,  194,
      442, 1193,  194,  194, 1193, 1193,  194,  446,  539,  194,
      540,  537,  194,  452,  541,  451,  194,  447,  194,  194,
      454, 1193,  194, 1193, 1193,  538,  194,  448,  455,  194,
      456,  194,  449,  450, 1193,  539, 1193,  540,  194,  194,
      461,  541,  194,  194,  447,  194, 1193,  542,  457,  194,
      458,  194,  194,  194,  448,  455,  460,  456,  194,  449,

      450,  459,  462,  194, 1193,  194,  194,  461,  543,  194,
      194,  544,  194,  194,  542,  457,  194,  458,  194,  194,
      194,  463, 1193,  460,  545,  194,  194,  546,  459,  462,
      194,  464,  465,  194, 1193,  543,  194,  466,  544,  194,
      194,  194,  194,  194, 1193,  194,  194,  467,  463,  468,
      194,  545,  194,  194,  546, 1193,  471,  469,  464,  465,
      194,  194,  194,  194,  466,  194,  194, 1193,  194,  194,
      194,  472,  194,  194,  467,  473,  468,  194,  470, 1193,
      194, 1193,  474,  471,  469,  194,  194,  194,  194,  194,
     1193,  194,  194,  194,  194,  475,  477,  194,  472,  547,

      476,  548,  473, 1193,  194,  470,  194,  194,  480,  474,
      194,  478,  194,  194,  194, 1193,  194,  481,  194,  479,
      549,  194,  475,  477,  194,  482,  547,  476,  548,  194,
      194,  194, 1193,  194,  550,  480,  194,  194,  478,  483,
      194,  194,  487,  194,  481,  194,  479,  549,  490,  194,
      484,  194,  482,  485,  194,  486,  194,  194,  551,  194,
      194,  550, 1193,  194, 1193,  194,  483,  194,  194,  487,
      194,  552,  194,  194,  194,  490,  194,  484,  488,  194,
      485,  194,  486,  194,  492,  551,  194,  194,  553,  489,
      194,  491,  194,  194,  531,  194, 1193,  194,  552, 1193,

      194,  194, 1193,  194,  493,  488,  194, 1193,  194,  532,
      194,  492, 1193,  497,  194,  553,  489,  194,  491,  194,
      194,  531,  504,  495,  494,  498,  496, 1193,  194,  499,
      194,  493,  554, 1193,  194,  194,  532, 1193,  555,  194,
      497,  194,  194,  194,  502,  194,  194,  194,  556,  504,
      495,  494,  498,  496,  500,  194,  499,  503,  505,  554,
      501,  194,  557,  194,  194,  555,  194,  194,  558,  194,
      194,  502,  194,  506,  194,  556,  559,  194, 1193, 1193,
     1193,  500, 1193, 1193,  503,  505, 1193,  501,  560,  557,
      194,  194,  561,  564,  194,  558,  565,  194,  566,  516,

      506,  517,  567,  559,  194,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  560,  518,  562,  568,  561,
      564,  569,  570,  565,  194,  566,  516,  563,  517,  567,
      571,  572,  573,  574,  575,  576,  577,  578,  579,  580,
      581,  582,  583,  518,  562,  568,  584,  585,  569,  570,
      586,  587,  588,  589,  563,  590,  591,  571,  572,  573,
      574,  575,  576,  577,  578,  579,  580,  581,  582,  583,
      592,  593,  594,  584,  585,  595,  596,  586,  587,  588,
      589,  597,  590,  591,  598,  599,  600,  601,  602,  607,
      605,  603,  606,  608,  609,  610,  611,  592,  593,  594,

      604,  612,  595,  596,  613,  614,  616,  617,  597,  615,
     1193,  598,  599,  600,  601,  602,  607,  605,  603,  606,
      608,  609,  610,  611, 1193, 1193,  730,  604,  612,  194,
      619,  613,  614,  616,  617,  194,  615,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  620,  194,  194,
      194,  194,  194,  730, 1193,  194,  194,  619,  621,  622,
      194,  194,  194,  194, 1193,  624, 1193,  194,  194, 1193,
      623,  194,  194,  194,  620,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  731,  621,  622,  194,  194,  194,
      194,  625,  624,  194,  194,  194,  626,  623,  194,  194,

      194,  194,  627, 1193,  628,  194,  194,  194,  194,  194,
      194,  731, 1193,  632,  630,  194,  194,  194,  625,  629,
      194,  194,  631,  626,  194,  194,  194, 1193,  194,  627,
      633,  628,  194,  194,  635,  194,  194,  634,  194,  637,
      632,  630,  194,  194,  194,  732,  629, 1193,  194,  631,
      639,  194,  194,  194,  194,  194,  194,  633,  194,  194,
      640,  635,  194,  194,  634,  194,  637,  641,  636,  638,
      194,  194,  732,  642,  194,  194,  194,  639, 1193,  733,
     1193,  194,  194,  194,  645,  194,  194,  640,  643,  649,
      194,  194, 1193,  194,  641,  636,  638,  644,  194,  194,

      642,  194,  194,  194,  194,  647,  733,  194,  194,  194,
      194,  645, 1193,  194, 1193,  643,  649, 1193,  194,  194,
      194,  648,  646,  651,  644, 1193,  194,  194,  194,  734,
      194,  194,  647,  194,  194,  194,  194,  194,  650,  652,
      194,  194,  194,  194,  194, 1193,  194, 1193,  648,  646,
      651, 1193,  194,  194,  194,  194,  734,  194,  653,  654,
      194,  194,  194,  194,  194,  650,  652,  656,  194,  194,
      194,  194,  194,  194,  658,  657,  655, 1193,  194,  194,
      194, 1193, 1193,  194,  194,  653,  654, 1193,  194,  194,
      194,  194,  659,  662,  656,  194,  194,  194,  194,  194,

      194,  658,  657,  655,  194,  194,  194, 1193,  194,  194,
      194,  194,  664,  663,  660,  661,  194,  194,  735,  659,
      662, 1193,  194,  194,  194,  194,  194, 1193,  194,  194,
      194,  194,  194,  194,  665,  194,  194,  736,  194,  664,
      663,  660,  661,  194,  194,  735,  670,  666,  194,  671,
      194,  667,  194,  194,  668,  194,  194,  194,  194,  194,
      194,  665,  672,  194,  736,  194,  194, 1193,  194,  194,
      669,  194,  194,  670,  666,  194,  671,  194,  667,  194,
      194,  668,  194,  194,  673,  194,  677,  194,  675,  672,
      194,  194,  194,  194,  674,  194,  194,  669,  194,  194,

      678,  681,  194,  194,  194,  194,  679,  194, 1193,  194,
      194,  673,  676,  677,  737,  675,  680,  194,  194,  194,
      194,  674,  194,  194, 1193,  194,  194,  678,  681,  194,
      194,  194,  194,  679,  194,  194,  682,  194,  194,  676,
      683,  737,  684,  680,  194, 1193,  194,  194, 1193,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  690,
      194,  194,  194,  682,  194,  194,  685,  683,  194,  684,
      688,  194,  686,  194,  689,  687,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  690,  194,  194,  691,
      692,  194, 1193,  685,  194,  194,  738,  688,  194,  686,

      693,  689,  687,  194,  194,  194,  194,  194,  194,  194,
     1193,  194, 1193,  695,  194,  194,  691,  692,  194,  694,
      697,  194,  194,  738,  194,  194, 1193,  693,  194,  696,
      194, 1193,  194, 1193,  194,  194,  194,  699,  194,  701,
      695,  194,  194,  703,  194,  698,  694,  697,  194,  194,
      194,  194,  194,  194,  194,  194,  696,  194,  702,  194,
      700,  194,  194,  194,  699, 1193,  701, 1193,  194,  194,
      703,  194,  698,  194,  194,  194,  194,  194,  194,  739,
      194,  194,  194,  705,  194,  702,  194,  700,  740,  194,
      194,  741,  704,  706,  194,  194,  194,  194,  194,  707,

      194,  194, 1193,  194,  194,  194,  739,  194,  709,  194,
      705,  194,  712,  194,  708,  740,  194,  194,  741,  704,
      706,  194, 1193,  194,  194,  194,  707,  194,  710,  194,
     1193,  194,  194,  194,  194,  709,  194,  194,  711,  712,
      194,  708,  714,  194,  194,  742,  713,  743,  194,  194,
     1193,  715, 1193, 1193,  194,  710,  194,  194,  718,  194,
      194,  194,  194,  194,  194,  711,  719,  194,  194,  714,
      194,  194,  742,  713,  743,  194,  194,  716,  715,  717,
      720,  194,  744,  194,  194,  718,  745,  194,  194,  194,
      194,  194, 1193,  719,  194,  194,  194,  194,  194,  721,

      722,  194,  194,  194,  716, 1193,  717,  720,  194,  744,
      194,  724,  194,  745,  194,  727,  194,  194,  194,  723,
     1193,  194,  194,  194,  194,  746,  721,  722,  194,  194,
      194,  747,  194,  725,  194,  748,  749,  726,  724,  194,
      750,  751,  727,  194,  194,  752,  723,  728,  194,  194,
      753,  194,  746,  754,  194,  755,  756,  757,  747,  194,
      725,  194,  748,  749,  726,  758,  759,  750,  751,  760,
      761,  194,  752,  762,  728,  763,  764,  753,  765,  766,
      754,  194,  755,  756,  757,  767,  768,  769,  770,  771,
      772,  774,  758,  759,  775,  776,  760,  761,  777,  780,

      762,  773,  763,  764,  781,  765,  766,  778,  779,  782,
      783,  784,  767,  768,  769,  770,  771,  772,  774,  785,
      786,  775,  776,  787,  788,  777,  780,  789,  773,  790,
      791,  781,  792,  793,  778,  779,  782,  783,  784,  794,
      795,  796,  797,  798,  799,  800,  785,  786,  801,  802,
      787,  788,  803,  804,  789,  805,  790,  791,  806,  792,
      793,  807,  808,  809,  810,  811,  794,  795,  796,  797,
      798,  799,  800,  812,  813,  801,  802, 1193,  194,  803,
      804, 1193,  805,  194,  194,  806,  194, 1193,  807,  808,
      809,  810,  811, 1193,  194,  821,  815,  816,  817,  194,

      812,  813, 1193,  194,  194,  194,  818,  819,  820,  194,
      194,  194,  194,  194,  194,  194,  822,  194, 1193,  194,
      194,  194,  821,  815,  816,  817,  194,  900,  901,  194,
      194,  194,  194,  818,  819,  820,  194,  194,  902,  194,
      194,  194,  194,  822,  194,  823,  194,  194,  194,  194,
      194,  194,  825,  194,  900,  901,  194, 1193,  824,  194,
      903, 1193, 1193,  194,  194,  902,  826,  194,  194,  194,
      194,  194,  823,  194,  194,  194,  194,  194,  194,  825,
      194, 1193,  904,  194,  194,  824, 1193,  903,  194,  827,
      194,  905, 1193,  826,  194,  194,  194,  194,  194,  829,

      194,  194,  828,  194,  194,  194, 1193, 1193,  194,  904,
      194,  194,  830,  194,  194,  194,  827, 1193,  905,  832,
      834,  194,  831,  194,  194,  194,  829,  906,  833,  828,
      194,  194,  194,  194,  194,  194, 1193,  907,  194,  830,
      194,  194,  837,  194,  194,  908,  832,  834,  194,  831,
      194,  194,  194,  194,  906,  833,  835,  836,  194,  194,
      194,  194, 1193,  194,  907,  194, 1193,  194,  194,  837,
      194,  194,  908,  194,  838,  194,  194,  194,  194,  194,
      194, 1193,  845,  835,  836,  194,  194,  194,  839,  840,
      194, 1193,  841,  194,  194,  194,  194,  194,  194, 1193,

      194,  838,  194,  194,  194,  194,  194,  843,  842,  845,
      194,  194,  194,  194,  194,  839,  840,  844,  847,  841,
      194,  194,  194,  194,  194,  194,  194,  846, 1193,  194,
      194,  194,  194, 1193,  843,  842,  194,  194,  194,  194,
      194,  194,  194,  848,  844,  847,  194,  194,  194,  194,
      909,  194,  194,  194,  846,  194,  194,  194,  194,  194,
      194,  852,  849,  194,  850,  910,  194,  194,  194,  194,
      848,  194,  194,  194,  194,  194,  194,  909,  194,  194,
      194,  194,  194,  194,  194,  854,  194,  194,  852,  849,
      851,  850,  910,  194,  194, 1193,  194,  853,  194,  194,

      911,  194,  194,  194,  194,  194, 1193,  194,  194,  194,
      194,  194,  854,  194,  855,  194, 1193,  851,  856,  194,
      194,  194,  857,  194,  853,  194,  859,  911,  194,  194,
      194,  194,  194,  858,  194,  194,  194,  194,  912,  194,
      194,  855,  194,  194,  194,  856,  194,  194,  194,  857,
     1193, 1193,  194,  859,  194,  913,  194,  194,  860,  194,
      858,  194,  194,  194,  194,  912,  194,  194,  194,  862,
      194,  194,  914, 1193,  194,  861, 1193,  865,  194,  194,
     1193,  194,  913,  194, 1193,  860,  194,  194,  194,  194,
      194,  194,  863,  864,  194,  194,  862,  868,  194,  914,

      866,  194,  861,  194,  865,  194,  194,  194, 1193,  867,
      194,  194,  194,  194,  194,  194,  194,  194, 1193,  863,
      864,  194,  194,  915,  868,  194,  869,  866, 1193,  916,
      194,  194,  194,  194,  194,  870,  867,  194,  194,  194,
      194,  194,  194,  872,  194,  871,  194,  194, 1193,  194,
      915,  873, 1193,  869,  874,  194,  916,  194,  194,  194,
      194,  194,  870,  194,  194,  194,  194,  194,  194,  194,
      872,  194,  871,  194,  194,  194,  875, 1193,  873,  878,
      876,  874,  194,  194,  194,  194,  877, 1193,  194,  194,
      194,  194,  194,  194,  194,  194,  917,  880,  194,  194,

      194,  194,  194,  875,  879,  882,  878,  876,  881,  194,
      194, 1193,  194,  877,  884,  194,  194,  194,  194,  194,
      194,  194,  194,  917,  880,  194,  194,  194,  194,  194,
      194,  879,  882,  883,  194,  881,  194,  194,  194,  194,
      885,  884,  194,  194,  194, 1193,  194,  194,  194,  194,
      194,  918,  194,  886,  194, 1193,  194,  194,  194,  194,
      883,  194,  919,  194,  194,  194,  194,  885,  887,  888,
      194,  194,  194,  194,  194, 1193,  194,  194,  918,  891,
      886,  194,  889,  194, 1193,  194,  194,  194,  890,  919,
      194,  194,  194,  194, 1193,  887,  888,  894,  194,  194,

      194,  194,  892,  194, 1193,  194,  891,  194,  895,  889,
      194,  194,  920,  893,  194,  890,  194,  194,  194,  194,
      194,  194,  194,  921,  894,  194,  897,  194,  922,  892,
      194,  194,  194,  923,  194,  895,  194,  896,  194,  920,
      893,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      921,  924,  194,  897,  194,  922,  925,  926,  194,  898,
      923,  927,  928,  194,  896,  194,  929,  930,  194,  194,
      931,  932,  194,  194,  194,  933,  934,  935,  924,  936,
      937,  938,  939,  925,  926,  940,  898,  941,  927,  928,
      942,  943,  194,  929,  930,  944,  945,  931,  932,  946,

      947,  948,  933,  934,  935,  949,  936,  937,  938,  939,
      950,  951,  940,  952,  941,  953,  954,  942,  943,  955,
      956,  957,  944,  945,  958,  959,  946,  947,  948,  960,
      194, 1193,  949,  194,  194, 1193, 1193,  950,  951,  194,
      952, 1024,  953,  954,  963,  194,  955,  956,  957,  964,
      194,  958,  959,  194,  194,  962,  960,  194,  194,  194,
      194,  194,  965,  194,  194,  194,  194,  967, 1024,  194,
     1193,  963,  194,  966, 1025,  194,  964,  194,  194, 1026,
      194,  194,  962,  194,  194,  194,  194,  194,  970,  965,
      194,  194,  194,  194,  967,  194,  194,  969, 1193,  968,

      966, 1025,  194,  975,  194,  194, 1026,  194,  194,  194,
      194,  194,  194,  194,  194,  970,  971,  973,  194,  972,
      194,  194,  194,  194,  969,  974,  968,  194, 1193,  194,
      975,  194,  194,  194,  194,  194,  194,  976,  194,  194,
      194,  194,  194,  971,  973,  194,  972,  194,  194, 1027,
      194, 1193,  974,  194,  194,  979,  194,  977,  194,  194,
      194,  980,  194,  194,  976,  194, 1193,  978,  194,  194,
     1193,  194,  194, 1193,  194,  194, 1027,  983,  194, 1028,
      194,  194,  979,  194,  977,  194,  981,  982,  980,  194,
      194,  194,  194,  985,  978,  194,  194,  194,  194,  194,

      984,  194,  194, 1193,  983,  194, 1028, 1193,  194,  194,
      194,  194, 1029,  981,  982,  194,  194,  194,  194,  194,
      985,  194,  194,  194,  194,  194,  986,  984,  194,  194,
      194,  194,  987, 1193,  194,  194,  194,  988,  194, 1029,
      194, 1030,  194,  194,  194,  194, 1031, 1193,  194,  194,
      194,  194,  194,  986,  194,  194,  194,  194,  194,  987,
      194,  194,  194,  991,  988,  194,  989,  194, 1030,  194,
     1193,  194,  194, 1031,  194,  194,  194,  194,  194,  194,
      990,  194,  194,  194,  194,  194,  994,  194,  992,  194,
      991,  993,  194,  989,  194,  194,  194,  194,  194,  194,

      995,  194,  194, 1032,  194,  194,  194,  990,  194,  194,
      194,  194,  194,  994, 1033,  992,  194,  194,  993,  996,
      194,  194,  194,  999,  194,  194,  194,  995,  194,  997,
     1032,  194,  194,  194,  194,  194,  194,  998,  194,  194,
     1193, 1033, 1000, 1193,  194, 1193,  996,  194, 1003, 1193,
      999, 1193,  194,  194,  194,  194,  997,  194,  194,  194,
      194,  194,  194,  194,  998,  194,  194,  194,  194, 1000,
     1001, 1004,  194, 1193, 1034, 1003, 1002,  194, 1005, 1193,
      194,  194,  194,  194,  194,  194,  194,  194, 1035,  194,
      194,  194,  194, 1193,  194,  194, 1006, 1001, 1004,  194,

      194, 1034,  194, 1002,  194, 1005, 1008, 1007,  194,  194,
      194,  194,  194, 1011,  194, 1035, 1009,  194,  194,  194,
      194, 1010,  194, 1006, 1193, 1193,  194,  194,  194,  194,
     1036,  194,  194, 1008, 1007,  194, 1037,  194,  194,  194,
     1011,  194,  194, 1009,  194, 1012,  194,  194, 1010,  194,
      194,  194, 1015,  194, 1013,  194,  194, 1036,  194,  194,
     1017,  194, 1016, 1037,  194, 1014,  194, 1193,  194,  194,
      194, 1019, 1012,  194, 1018,  194,  194,  194,  194, 1015,
      194, 1013, 1193,  194,  194,  194,  194, 1017,  194, 1016,
     1021,  194, 1014,  194,  194,  194, 1022,  194, 1019, 1020,

      194, 1018,  194,  194,  194,  194, 1038,  194,  194,  194,
     1039,  194,  194,  194,  194, 1040, 1041, 1021,  194, 1042,
      194,  194,  194, 1022, 1043, 1044, 1020,  194,  194,  194,
     1045,  194,  194, 1038, 1046,  194,  194, 1039, 1047, 1048,
     1049,  194, 1040, 1041, 1050, 1051, 1042,  194, 1052, 1053,
     1054, 1043, 1044, 1055, 1056,  194,  194, 1045, 1057, 1058,
     1059, 1046, 1061,  194,  194, 1047, 1048, 1049, 1063, 1193,
     1193, 1050, 1051, 1062,  194, 1052, 1053, 1054,  194, 1193,
     1055, 1056,  194,  194,  194, 1057, 1058, 1059,  194, 1061,
      194,  194,  194, 1064,  194, 1063,  194,  194,  194, 1193,

     1062,  194, 1098, 1066, 1193,  194, 1065, 1193, 1099,  194,
      194,  194,  194, 1193,  194,  194,  194,  194, 1100,  194,
     1064,  194, 1067,  194,  194,  194, 1068,  194,  194, 1098,
     1066,  194,  194, 1065,  194, 1099,  194, 1071, 1069,  194,
      194,  194, 1070,  194,  194, 1100, 1101,  194,  194, 1067,
      194,  194,  194, 1068,  194,  194,  194, 1193,  194,  194,
      194,  194,  194,  194, 1071, 1069, 1072,  194,  194, 1070,
      194,  194, 1073, 1101,  194,  194,  194,  194,  194,  194,
     1102,  194,  194,  194,  194,  194,  194,  194,  194,  194,
     1074,  194,  194, 1072,  194,  194,  194,  194,  194, 1073,

     1075,  194,  194,  194,  194,  194,  194, 1102,  194,  194,
      194,  194,  194,  194,  194,  194, 1077, 1074,  194,  194,
     1078,  194,  194,  194,  194,  194,  194, 1075,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194, 1076, 1193,
     1103,  194, 1193, 1077,  194,  194,  194, 1078, 1079,  194,
      194,  194,  194,  194,  194,  194, 1081,  194, 1083,  194,
      194,  194,  194,  194, 1104, 1076, 1080, 1103,  194,  194,
      194,  194,  194,  194,  194, 1079, 1193,  194,  194,  194,
      194,  194,  194, 1081, 1082, 1083,  194,  194, 1084,  194,
     1085, 1104,  194, 1080,  194,  194,  194,  194, 1086, 1193,

      194,  194, 1193,  194,  194,  194,  194,  194,  194,  194,
     1105, 1082,  194, 1193, 1193, 1084,  194, 1085, 1087,  194,
      194,  194, 1088,  194,  194, 1086,  194,  194,  194,  194,
      194,  194,  194, 1090,  194,  194,  194, 1105, 1091,  194,
     1092, 1089,  194, 1193,  194, 1087,  194,  194, 1193, 1088,
      194,  194,  194,  194,  194,  194,  194,  194, 1106,  194,
     1090,  194,  194,  194,  194, 1091,  194, 1092, 1089,  194,
     1093,  194,  194,  194,  194,  194, 1193,  194, 1094,  194,
     1193,  194, 1107,  194,  194, 1106,  194,  194, 1108,  194,
      194,  194,  194,  194,  194,  194,  194, 1093, 1109,  194,

     1095,  194,  194, 1096,  194, 1094, 1110,  194, 1111, 1107,
      194, 1112, 1113,  194,  194, 1108,  194,  194, 1193,  194,
      194,  194,  194,  194, 1193, 1109,  194, 1095, 1115,  194,
     1096,  194, 1116, 1110,  194, 1111, 1193,  194, 1112, 1113,
      194, 1117,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194, 1118, 1115,  194, 1193,  194, 1116,
      194, 1132,  194,  194,  194,  194, 1193,  194, 1117,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194, 1118,  194,  194,  194,  194, 1119,  194, 1132,  194,
      194,  194,  194, 1120,  194,  194,  194,  194,  194, 1193,

     1133,  194,  194, 1121,  194,  194,  194,  194, 1123,  194,
      194,  194,  194, 1119,  194,  194,  194,  194,  194, 1122,
     1120,  194,  194,  194, 1134,  194,  194, 1133,  194,  194,
     1121,  194,  194,  194,  194, 1123, 1135,  194,  194,  194,
     1193,  194,  194,  194,  194,  194, 1122,  194,  194, 1124,
      194, 1134,  194,  194,  194,  194, 1125, 1193,  194,  194,
      194,  194, 1126, 1135,  194,  194,  194,  194,  194, 1136,
      194,  194,  194, 1127,  194,  194, 1124,  194, 1137, 1128,
      194,  194, 1130, 1125,  194,  194,  194,  194,  194, 1126,
      194,  194, 1138,  194,  194,  194, 1136,  194,  194, 1129,

     1127,  194,  194,  194,  194, 1137, 1128,  194,  194, 1130,
      194,  194,  194,  194, 1140,  194,  194,  194,  194, 1138,
      194,  194,  194,  194,  194,  194, 1129, 1141,  194,  194,
      194,  194,  194, 1193, 1193,  194,  194,  194,  194,  194,
      194, 1140,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194, 1142, 1141,  194,  194,  194,  194,  194,
     1143,  194, 1149,  194, 1150,  194,  194,  194, 1145,  194,
     1151,  194,  194,  194,  194,  194, 1144,  194, 1193, 1193,
     1142,  194,  194,  194,  194,  194,  194, 1143,  194, 1149,
     1146, 1150, 1154,  194,  194, 1145, 1193, 1151, 1153, 1148,

      194,  194,  194, 1144,  194,  194,  194, 1193,  194,  194,
     1159, 1164,  194,  194,  194, 1155, 1193, 1146, 1193, 1154,
      194,  194, 1193,  194, 1156,  194,  194,  194,  194,  194,
     1148, 1148,  194,  194,  194,  194,  194, 1159, 1164,  194,
      194,  194, 1155,  194, 1153, 1148,  194,  194,  194, 1162,
      194, 1156,  194,  194, 1166,  194,  194,  194, 1168, 1193,
      194,  194,  194, 1170, 1172, 1174, 1176,  194, 1178, 1180,
      194, 1182, 1158,  194, 1184, 1186, 1162,  194, 1193, 1193,
     1193, 1166,  194, 1193,  194, 1168, 1161,  194, 1193, 1193,
     1170, 1172, 1174, 1176, 1193, 1178, 1180, 1193, 1182, 1158,

     1193, 1184, 1186, 1193,  194, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1161,   46,   46,   46,   46,   46,   88,
     1193, 1193,   88,   88,  179,  179,  179, 1193,  179,  181,
     1193,  181,  181,  181,  184, 1193,  184,  184,  184,  194,
     1193,  194,  194,  194,    7, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,

     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193
    } ;

static yyconst flex_int16_t yy_chk[4822] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    9,    9,   10,   10,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   15,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       18,   21,   22,   21,   24, 1196,   23,   30,   24,   21,
     1190,   21,   24,   23,   31,   21,   21,   44,   24,   99,

       23,   24,   22,   23, 1189,   25, 1188,   25,   21,   22,
       21,   24,   25,   23,   30,   24,   21,   25,   21,   24,
       23,   31,   21,   21,   44,   24,   99,   23,   24,   22,
       23,   27,   25,   28,   25, 1187,   32,   27, 1185,   25,
       32,   28,   29,   42,   25,   26,   32,   28,   29,   29,
       29,   42, 1183,   26, 1181,   29,   26, 1179,   27,   26,
       28, 1177,   26,   32,   27,   26, 1175,   32,   28,   29,
       42, 1173,   26,   32,   28,   29,   29,   29,   42,   34,
       26,   33,   29,   26,   36,   33,   26,   43,   43,   26,
       35,   33,   26,   34,  100,   36,   49,   49,   35,   34,

       34,   36,   35,   38, 1171,   35,   34,   38,   33,   50,
       50,   36,   33,   38,   43,   43, 1169,   35,   33, 1167,
       34,  100,   36,  103,   55,   35,   34,   34,   36,   35,
       38,   41,   35,   41,   38,   55,   41,   58,   58, 1165,
       38,   39,  104,   39, 1163,   71,   39,   77,   86,   86,
      103,   39, 1160,   39,   39, 1157,   70, 1152,   41, 1147,
       41,  108, 1139,   41,   67,   71,   70,   77,   39,  104,
       39,   67,   71,   39,   77,   72,   70,   67,   39,   72,
       39,   39,   40,   70,   67,   72,   40,  110,  108,   40,
       40,   67,   71,   70,   77,   72,   40,  110,   67,   40,

      182,  182,   72,   70,   67, 1131,   72, 1132, 1132,   40,
     1114,   67,   72,   40,  110, 1097,   40,   40, 1060, 1023,
      961,  899,   72,   40,  110,  814,   40,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   61,   61,
      729,   61,   61,   61,   61,   61,   61,   84,   68,  114,
      618,  507,   68,  392,  276,  115,   68,   61,   61,   61,
       73,  101,   68,   61,   73,   61,  116,   84,  117,  101,
       73,   61,   68,   61,   84,   68,  114,   61,   61,   68,
       73,  102,  115,   68,  102,  186,  184,   73,  101,   68,

       61,   73,   61,  116,   84,  117,  101,   73,   61,   68,
       61,   90,   88,  118,   61,   61,   85,   73,  102,   60,
       59,  102,   76,   61,   62,   62,   76,   62,   62,   62,
       62,   62,   62,   76,   82,   52,   51,   78,   82,   76,
      118,   78,   82,   62,   62,   62,   76,   78,  120,   76,
       62,   47,   45,   76,  121,   20,  122,   78,   82,   83,
       76,   82,   83,   83,   78,   82,   76,   19,   78,   82,
       62,  107,   11,   76,   78,  120,  123,   62,  107,   83,
        7,  121,   81,  122,   78,   82,   83,    4,    3,   83,
       83,   81,  124,   81,  105,  105,   81,   62,  107,   62,

       63,  125,   81,  123,   63,  107,   83,   63,  105,   81,
        0,  109,  109,  109,   63,  109,    0,   63,   81,  124,
       81,  105,  105,   81,   63,    0,  126,   63,  125,   81,
      127,   63,  111,    0,   63,  105,  129,  111,  109,  109,
      109,   63,  109,  112,   63,  112,  113,  113,  112,    0,
      130,   63,   64,  126,  112,    0,   64,  127,  132,  111,
       64,  112,  133,  129,  111,  119,   64,  119,  135,   64,
      112,  119,  112,  113,  113,  112,   64,  130,  119,   64,
      136,  112,  119,   64,    0,  132,    0,   64,  112,  133,
      137,    0,  119,   64,  119,  135,   64,    0,  119,  128,

      134,  138,  128,   64,   65,  119,  139,  136,  139,  119,
      134,   65,  141,   65,  142,  134,  134,  137,   65,  140,
      143,  140,  144,   65,   65,    0,  128,  134,  138,  128,
      145,   65,  140,  139,  146,  139,    0,  134,   65,  141,
       65,  142,  134,  134,  147,   65,  140,  143,  140,  144,
       65,   65,   66,  148,  150,  151,   66,  145,  152,  140,
       66,  146,  153,   66,  154,  156,   66,  157,  154,   66,
      158,  147,   66,    0,    0,  160,   66,    0,    0,   66,
      148,  150,  151,   66,    0,  152,    0,   66,  155,  153,
       66,  154,  156,   66,  157,  154,   66,  158,  161,   66,

      159,  155,  160,   66,   69,   69,  155,  162,  163,  159,
      164,   69,   69,   69,  166,  155,  167,  159,   69,  165,
      168,  171,  169,  170,   69,  161,  170,  159,  155,    0,
      165,   69,   69,  155,  162,  163,  159,  164,   69,   69,
       69,  166,  169,  167,  159,   69,  165,  168,  171,  169,
      170,   69,   74,  170,  172,  173,   74,  165,  172,  175,
      176,  173,  174,  177,  194,    0,   74,    0,    0,  169,
      279,  281,   74,   74,  282,  174,   74,    0,    0,   74,
        0,  172,  173,   74,  194,  172,  175,  176,  173,  174,
      177,  194,  196,   74,  195,  195,  199,  279,  281,   74,

       74,  282,  174,   74,   75,   75,    0,  196,  202,  199,
      284,  194,  196,   75,    0,  195,  199,   75,    0,  196,
       75,  195,  195,  199,   75,    0,  197,    0,  202,    0,
        0,   75,   75,  197,  196,  202,  199,  284,    0,  196,
       75,  197,  195,  199,   75,  198,  197,   75,  198,  198,
      286,   75,   79,  197,   79,  202,  200,   79,  200,  287,
      197,  288,   79,  289,   79,   79,    0,    0,  197,  198,
        0,  291,  198,  197,   79,  198,  198,  286,  200,   79,
      216,   79,    0,  200,   79,  200,  287,  216,  288,   79,
      289,   79,   79,  201,  201,  201,  198,  203,  291,    0,

      216,   79,   80,  207,  203,  200,   80,  216,  201,   80,
       80,  203,  292,  201,  216,  293,   80,  203,  207,   80,
      201,  201,  201,  207,  203,  294,   80,  216,    0,   80,
      207,  203,    0,   80,    0,  201,   80,   80,  203,  292,
      201,    0,  293,   80,  203,  207,   80,    0,    0,    0,
      207,    0,  294,   80,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  204,  206,  209,  210,
      204,  213,  213,  295,    0,  296,    0,  206,  297,  298,
      299,  209,  209,    0,  300,  210,    0,  206,  209,  210,
      204,    0,  213,  204,  206,  209,  210,  204,  213,  213,
      295,  225,  296,  211,  206,  297,  298,  299,  209,  209,
      225,  300,  210,  211,  206,  209,  210,  204,  205,  213,
      301,  225,  212,  211,    0,  205,  205,  205,  225,  205,
      211,  227,  302,  214,    0,  214,  212,  225,  205,    0,
      211,    0,  212,    0,    0,  205,  304,  301,  225,  212,

      211,  227,  205,  205,  205,  214,  205,    0,  227,  302,
      214,  233,  214,  212,  305,  205,  208,  217,  208,  212,
      208,  208,  219,  304,  217,    0,  218,  208,  227,    0,
      245,  233,  214,  306,  208,  219,  218,  217,  233,    0,
      208,  305,  219,  208,  217,  208,  218,  208,  208,  219,
      245,  217,  221,  218,  208,  220,  222,  245,  233,  221,
      306,  208,  219,  218,  217,  220,  222,  208,  215,  219,
      215,    0,  221,  218,  215,  220,  222,  245,  223,  221,
        0,  215,  220,  222,  226,  215,  221,  228,  223,    0,
      215,  228,  220,  222,  307,  215,  224,  215,  223,  221,

      226,  215,  220,  222,  226,  223,    0,  228,  215,  229,
      224,  226,  215,  224,  228,  223,  224,  215,  228,  231,
      229,  307,  232,  224,  308,  223,  232,  226,  231,  229,
        0,  226,  234,  234,  228,    0,  229,  224,  309,  231,
      224,    0,  232,  224,    0,    0,  231,  229,  311,  232,
      312,  308,  234,  232,  313,  231,  229,  230,  230,  234,
      234,    0,  235,    0,    0,  309,  231,  230,  235,  232,
      235,  238,  230,  230,    0,  311,    0,  312,  230,  234,
      238,  313,  235,  237,  230,  230,    0,  314,  236,  235,
      236,  238,  236,  239,  230,  235,  237,  235,  238,  230,

      230,  236,  239,  237,    0,  230,  240,  238,  315,  235,
      237,  316,  236,  239,  314,  236,  241,  236,  238,  236,
      239,  240,    0,  237,  317,  242,  240,  318,  236,  239,
      237,  241,  242,  240,    0,  315,  241,  243,  316,  236,
      239,  243,  247,  241,    0,  242,  244,  244,  240,  246,
      246,  317,  242,  240,  318,    0,  249,  247,  241,  242,
      249,  243,  247,  241,  243,  248,  244,    0,  243,  247,
      246,  250,  242,  244,  244,  250,  246,  246,  248,    0,
      249,    0,  251,  249,  247,  248,  251,  249,  243,  247,
        0,  250,  248,  244,  252,  251,  252,  246,  250,  319,

      251,  320,  250,    0,  253,  248,  251,  249,  255,  251,
      255,  253,  248,  251,  252,    0,  254,  255,  250,  254,
      321,  252,  251,  252,  253,  255,  319,  251,  320,  256,
      255,  253,    0,  251,  322,  255,  254,  255,  253,  256,
      258,  252,  260,  254,  255,  260,  254,  321,  262,  256,
      257,  253,  255,  258,  257,  259,  256,  255,  323,  259,
      258,  322,    0,  254,    0,  260,  256,  258,  262,  260,
      261,  324,  260,  264,  257,  262,  256,  257,  261,  259,
      258,  257,  259,  263,  264,  323,  259,  258,  325,  261,
      261,  263,  260,  264,  303,  262,    0,  261,  324,    0,

      264,  257,    0,  263,  265,  261,  259,    0,  265,  303,
      263,  264,    0,  267,  267,  325,  261,  261,  263,  266,
      264,  303,  271,  266,  265,  268,  266,    0,  265,  268,
      263,  265,  326,    0,  267,  265,  303,    0,  327,  266,
      267,  267,  271,  272,  270,  268,  266,  269,  328,  271,
      266,  265,  268,  266,  269,  265,  268,  270,  272,  326,
      269,  267,  329,  272,  270,  327,  266,  269,  330,  271,
      272,  270,  268,  273,  269,  328,  331,  273,    0,    0,
        0,  269,    0,    0,  270,  272,    0,  269,  332,  329,
      272,  270,  333,  335,  269,  330,  336,  273,  338,  290,

      273,  290,  339,  331,  273,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  332,  290,  334,  340,  333,
      335,  341,  342,  336,  273,  338,  290,  334,  290,  339,
      343,  344,  345,  346,  347,  349,  350,  351,  352,  353,
      354,  355,  356,  290,  334,  340,  357,  358,  341,  342,
      359,  360,  361,  362,  334,  363,  364,  343,  344,  345,
      346,  347,  349,  350,  351,  352,  353,  354,  355,  356,
      365,  367,  368,  357,  358,  369,  370,  359,  360,  361,
      362,  371,  363,  364,  372,  373,  374,  375,  377,  380,
      379,  378,  379,  381,  383,  384,  385,  365,  367,  368,

      378,  386,  369,  370,  387,  388,  389,  390,  371,  388,
        0,  372,  373,  374,  375,  377,  380,  379,  378,  379,
      381,  383,  384,  385,    0,    0,  508,  378,  386,  394,
      395,  387,  388,  389,  390,  396,  388,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  397,  399,  394,
      395,  398,  401,  508,    0,  396,  394,  395,  398,  400,
      402,  403,  396,  400,    0,  403,    0,  397,  399,    0,
      402,  398,  401,  404,  397,  399,  394,  395,  398,  401,
      402,  403,  396,  400,  509,  398,  400,  402,  403,  405,
      400,  404,  403,  404,  397,  399,  405,  402,  398,  401,

      404,  407,  406,    0,  406,  409,  408,  402,  403,  405,
      400,  509,    0,  409,  407,  410,  405,  411,  404,  406,
      404,  407,  408,  405,  406,  409,  408,    0,  407,  406,
      410,  406,  409,  408,  412,  410,  405,  411,  412,  414,
      409,  407,  410,  416,  411,  510,  406,    0,  407,  408,
      416,  406,  409,  408,  413,  415,  417,  410,  412,  414,
      417,  412,  410,  416,  411,  412,  414,  418,  413,  415,
      416,  418,  510,  419,  413,  415,  417,  416,    0,  511,
        0,  413,  415,  417,  421,  412,  414,  417,  419,  425,
      416,  418,    0,  419,  418,  413,  415,  420,  418,  420,

      419,  413,  415,  417,  421,  423,  511,  422,  423,  425,
      424,  421,    0,  426,    0,  419,  425,    0,  418,  420,
      419,  424,  422,  428,  420,    0,  420,  422,  423,  512,
      424,  421,  423,  426,  422,  423,  425,  424,  427,  429,
      426,  429,  427,  428,  430,    0,  420,    0,  424,  422,
      428,    0,  431,  433,  422,  423,  512,  424,  430,  431,
      426,  429,  427,  432,  430,  427,  429,  433,  429,  427,
      428,  430,  431,  433,  435,  434,  432,    0,  435,  431,
      433,    0,    0,  432,  436,  430,  431,    0,  429,  427,
      432,  430,  436,  439,  433,  434,  439,  440,  435,  431,

      433,  435,  434,  432,  436,  435,  437,    0,  438,  441,
      432,  436,  441,  440,  437,  438,  439,  440,  513,  436,
      439,    0,  434,  439,  440,  435,  437,    0,  438,  441,
      442,  436,  443,  437,  442,  438,  441,  514,  444,  441,
      440,  437,  438,  439,  440,  513,  447,  443,  445,  448,
      442,  444,  443,  437,  445,  438,  441,  442,  444,  443,
      446,  442,  449,  453,  514,  444,  447,    0,  445,  448,
      446,  454,  451,  447,  443,  445,  448,  442,  444,  443,
      446,  445,  449,  453,  450,  444,  454,  446,  451,  449,
      453,  454,  451,  447,  450,  445,  448,  446,  454,  451,

      455,  458,  456,  452,  450,  458,  456,  446,    0,  449,
      453,  450,  452,  454,  516,  451,  457,  457,  454,  451,
      455,  450,  456,  452,    0,  458,  461,  455,  458,  456,
      452,  450,  458,  456,  459,  464,  459,  457,  460,  452,
      460,  516,  461,  457,  457,    0,  461,  455,    0,  456,
      452,  462,  458,  461,  459,  464,  463,  466,  460,  468,
      467,  459,  464,  459,  457,  460,  462,  460,  465,  461,
      466,  462,  463,  461,  467,  465,  463,  466,  462,  468,
      467,  459,  464,  463,  466,  460,  468,  467,  465,  469,
      470,  471,    0,  462,  470,  465,  519,  466,  462,  463,

      471,  467,  465,  463,  466,  473,  468,  467,  472,  469,
        0,  471,    0,  473,  470,  465,  469,  470,  471,  472,
      475,  470,  474,  519,  475,  473,    0,  471,  472,  474,
      476,    0,  473,    0,  477,  472,  469,  477,  471,  479,
      473,  470,  474,  481,  475,  476,  472,  475,  480,  474,
      476,  475,  473,  478,  477,  472,  474,  476,  480,  479,
      478,  477,  482,  481,  477,    0,  479,    0,  480,  474,
      481,  475,  476,  478,  483,  480,  484,  476,  485,  520,
      478,  477,  482,  484,  486,  480,  479,  478,  521,  482,
      481,  522,  483,  485,  483,  480,  484,  488,  485,  486,

      478,  483,    0,  484,  486,  485,  520,  487,  488,  482,
      484,  486,  491,  489,  487,  521,  492,  488,  522,  483,
      485,  483,    0,  484,  488,  485,  486,  487,  489,  490,
        0,  486,  491,  489,  487,  488,  492,  493,  490,  491,
      489,  487,  494,  492,  488,  524,  493,  525,  496,  490,
        0,  494,    0,    0,  487,  489,  490,  493,  496,  491,
      489,  498,  494,  492,  493,  490,  497,  495,  496,  494,
      497,  499,  524,  493,  525,  496,  490,  495,  494,  495,
      499,  498,  526,  500,  493,  496,  528,  495,  498,  494,
      497,  499,    0,  497,  495,  496,  503,  497,  499,  500,

      501,  502,  501,  500,  495,    0,  495,  499,  498,  526,
      500,  503,  505,  528,  495,  505,  503,  497,  499,  502,
        0,  502,  501,  503,  504,  529,  500,  501,  502,  501,
      500,  530,  505,  504,  506,  531,  532,  504,  503,  505,
      533,  534,  505,  503,  504,  535,  502,  506,  502,  501,
      536,  504,  529,  539,  506,  540,  541,  542,  530,  505,
      504,  506,  531,  532,  504,  543,  544,  533,  534,  545,
      547,  504,  535,  548,  506,  551,  552,  536,  554,  556,
      539,  506,  540,  541,  542,  557,  558,  559,  560,  561,
      562,  564,  543,  544,  568,  570,  545,  547,  572,  574,

      548,  562,  551,  552,  575,  554,  556,  573,  573,  577,
      578,  579,  557,  558,  559,  560,  561,  562,  564,  580,
      581,  568,  570,  583,  584,  572,  574,  586,  562,  587,
      588,  575,  589,  590,  573,  573,  577,  578,  579,  591,
      592,  594,  595,  596,  597,  598,  580,  581,  601,  602,
      583,  584,  604,  605,  586,  606,  587,  588,  607,  589,
      590,  608,  609,  610,  611,  613,  591,  592,  594,  595,
      596,  597,  598,  615,  617,  601,  602,    0,  621,  604,
      605,    0,  606,  619,  620,  607,  622,    0,  608,  609,
      610,  611,  613,    0,  623,  625,  619,  620,  621,  624,

      615,  617,    0,  619,  620,  621,  622,  623,  624,  626,
      619,  620,  628,  622,  623,  625,  627,  629,    0,  624,
      627,  623,  625,  619,  620,  621,  624,  732,  734,  626,
      619,  620,  628,  622,  623,  624,  626,  629,  736,  628,
      627,  623,  625,  627,  629,  630,  624,  627,  632,  630,
      631,  634,  632,  633,  732,  734,  626,    0,  631,  628,
      737,    0,    0,  638,  629,  736,  633,  627,  632,  630,
      631,  634,  630,  633,  635,  632,  630,  631,  634,  632,
      633,    0,  738,  638,  637,  631,    0,  737,  636,  635,
      638,  739,    0,  633,  635,  632,  630,  631,  634,  637,

      633,  635,  636,  641,  637,  639,    0,    0,  636,  738,
      638,  637,  639,  642,  640,  636,  635,    0,  739,  641,
      643,  635,  640,  641,  643,  639,  637,  740,  642,  636,
      641,  637,  639,  642,  640,  636,    0,  741,  646,  639,
      642,  640,  646,  644,  643,  742,  641,  643,  648,  640,
      641,  643,  639,  649,  740,  642,  644,  645,  646,  645,
      642,  640,    0,  644,  741,  646,    0,  647,  648,  646,
      644,  643,  742,  649,  647,  648,  652,  650,  651,  645,
      649,    0,  656,  644,  645,  646,  645,  647,  650,  651,
      644,    0,  652,  653,  647,  648,  652,  650,  651,    0,

      649,  647,  656,  652,  650,  651,  645,  654,  653,  656,
      657,  654,  658,  653,  647,  650,  651,  655,  659,  652,
      653,  655,  659,  652,  650,  651,  660,  658,    0,  656,
      657,  654,  658,    0,  654,  653,  661,  657,  654,  658,
      653,  655,  659,  662,  655,  659,  660,  662,  655,  659,
      744,  663,  664,  660,  658,  665,  661,  657,  654,  658,
      666,  668,  663,  661,  665,  745,  670,  662,  655,  659,
      662,  663,  664,  660,  662,  665,  667,  744,  663,  664,
      666,  668,  665,  661,  669,  670,  670,  666,  668,  663,
      667,  665,  745,  670,  662,    0,  667,  669,  663,  664,

      746,  671,  665,  667,  669,  672,    0,  666,  668,  674,
      676,  669,  670,  670,  671,  677,    0,  667,  672,  675,
      673,  671,  673,  667,  669,  672,  675,  746,  671,  674,
      676,  669,  672,  673,  678,  677,  674,  676,  747,  675,
      673,  671,  677,  679,  680,  672,  675,  673,  671,  673,
        0,    0,  672,  675,  678,  748,  674,  676,  679,  682,
      673,  678,  677,  679,  680,  747,  675,  673,  681,  683,
      679,  680,  750,    0,  685,  681,    0,  685,  684,  682,
        0,  678,  748,  687,    0,  679,  682,  686,  681,  683,
      679,  680,  684,  684,  685,  681,  683,  689,  684,  750,

      686,  685,  681,  687,  685,  684,  682,  686,    0,  688,
      687,  688,  693,  690,  686,  681,  683,  689,    0,  684,
      684,  685,  691,  751,  689,  684,  690,  686,    0,  752,
      687,  688,  693,  690,  686,  691,  688,  692,  688,  693,
      690,  696,  691,  694,  689,  692,  697,  694,    0,  691,
      751,  695,    0,  690,  697,  695,  752,  692,  688,  693,
      690,  696,  691,  698,  692,  699,  697,  694,  696,  691,
      694,  701,  692,  697,  694,  695,  698,    0,  695,  701,
      699,  697,  695,  698,  692,  699,  700,    0,  696,  700,
      698,  701,  699,  697,  694,  702,  753,  703,  701,  703,

      704,  705,  695,  698,  702,  706,  701,  699,  705,  700,
      698,    0,  699,  700,  708,  702,  700,  710,  701,  703,
      704,  705,  702,  753,  703,  706,  703,  704,  705,  707,
      709,  702,  706,  707,  708,  705,  700,  710,  711,  712,
      709,  708,  702,  714,  710,    0,  703,  704,  705,  707,
      709,  754,  706,  712,  713,    0,  707,  709,  711,  712,
      707,  708,  755,  714,  710,  711,  712,  709,  713,  715,
      714,  715,  717,  716,  713,    0,  707,  709,  754,  718,
      712,  713,  716,  718,    0,  711,  712,  719,  717,  755,
      714,  715,  717,  716,    0,  713,  715,  721,  715,  717,

      716,  713,  719,  718,    0,  722,  718,  719,  722,  716,
      718,  720,  756,  720,  719,  717,  723,  721,  715,  717,
      716,  724,  725,  757,  721,  722,  726,  727,  758,  719,
      718,  720,  722,  759,  719,  722,  723,  724,  720,  756,
      720,  724,  725,  723,  721,  728,  726,  727,  724,  725,
      757,  762,  722,  726,  727,  758,  763,  765,  720,  728,
      759,  768,  771,  723,  724,  728,  772,  773,  724,  725,
      773,  774,  728,  726,  727,  779,  780,  781,  762,  782,
      783,  786,  787,  763,  765,  788,  728,  789,  768,  771,
      790,  792,  728,  772,  773,  793,  794,  773,  774,  795,

      796,  797,  779,  780,  781,  798,  782,  783,  786,  787,
      799,  800,  788,  801,  789,  802,  803,  790,  792,  805,
      806,  807,  793,  794,  809,  810,  795,  796,  797,  811,
      815,    0,  798,  816,  817,    0,    0,  799,  800,  818,
      801,  900,  802,  803,  819,  820,  805,  806,  807,  821,
      815,  809,  810,  816,  817,  817,  811,  815,  824,  818,
      816,  817,  822,  822,  819,  820,  818,  824,  900,  821,
        0,  819,  820,  823,  902,  823,  821,  815,  824,  903,
      816,  817,  817,  822,  825,  824,  818,  826,  827,  822,
      822,  819,  820,  828,  824,  823,  821,  826,    0,  825,

      823,  902,  823,  833,  825,  824,  903,  826,  827,  830,
      822,  825,  829,  828,  826,  827,  829,  831,  832,  830,
      828,  831,  823,  833,  826,  832,  825,  834,    0,  830,
      833,  825,  829,  835,  826,  827,  830,  835,  832,  829,
      828,  831,  836,  829,  831,  832,  830,  834,  831,  904,
      833,    0,  832,  835,  834,  838,  830,  836,  837,  829,
      835,  839,  836,  842,  835,  832,    0,  837,  831,  836,
        0,  840,  841,    0,  834,  838,  904,  842,  837,  905,
      835,  839,  838,  842,  836,  837,  840,  841,  839,  836,
      842,  840,  841,  844,  837,  844,  843,  845,  840,  841,

      843,  846,  838,    0,  842,  837,  905,    0,  839,  849,
      842,  847,  907,  840,  841,  844,  843,  845,  840,  841,
      844,  846,  844,  843,  845,  848,  847,  843,  846,  849,
      851,  847,  848,    0,  852,  850,  849,  850,  847,  907,
      854,  909,  844,  843,  845,  848,  910,    0,  846,  855,
      851,  853,  848,  847,  852,  850,  849,  851,  847,  848,
      854,  852,  850,  857,  850,  856,  853,  854,  909,  855,
        0,  853,  848,  910,  858,  860,  855,  851,  853,  859,
      856,  852,  850,  857,  861,  856,  859,  854,  858,  862,
      857,  858,  856,  853,  858,  860,  855,  863,  853,  859,

      864,  858,  860,  911,  861,  865,  859,  856,  868,  862,
      857,  861,  856,  859,  912,  858,  862,  863,  858,  865,
      864,  858,  860,  868,  863,  865,  859,  864,  868,  866,
      911,  861,  865,  866,  867,  868,  862,  867,  869,  870,
        0,  912,  871,    0,  863,    0,  865,  864,  874,    0,
      868,    0,  865,  866,  867,  868,  866,  872,  869,  870,
      866,  867,  871,  873,  867,  869,  870,  875,  874,  871,
      872,  875,  876,    0,  914,  874,  873,  872,  877,    0,
      866,  867,  877,  873,  872,  869,  870,  875,  916,  871,
      873,  880,  876,    0,  875,  874,  878,  872,  875,  876,

      878,  914,  877,  873,  872,  877,  880,  879,  879,  877,
      873,  880,  881,  883,  875,  916,  881,  883,  880,  876,
      878,  882,  882,  878,    0,    0,  889,  878,  879,  877,
      920,  884,  881,  880,  879,  879,  922,  883,  880,  881,
      883,  885,  882,  881,  883,  884,  889,  878,  882,  882,
      886,  884,  887,  889,  885,  879,  887,  920,  884,  881,
      890,  885,  888,  922,  883,  886,  888,    0,  885,  882,
      886,  892,  884,  889,  891,  891,  887,  886,  884,  887,
      890,  885,    0,  887,  893,  894,  888,  890,  885,  888,
      895,  892,  886,  888,  895,  891,  896,  886,  892,  894,

      896,  891,  891,  887,  893,  894,  923,  890,  897,  898,
      929,  893,  894,  888,  895,  930,  931,  895,  892,  933,
      896,  895,  891,  896,  935,  936,  894,  896,  897,  898,
      938,  893,  894,  923,  939,  897,  898,  929,  940,  942,
      943,  895,  930,  931,  944,  945,  933,  896,  947,  949,
      951,  935,  936,  952,  953,  897,  898,  938,  954,  959,
      960,  939,  962,  963,  964,  940,  942,  943,  965,    0,
        0,  944,  945,  964,  968,  947,  949,  951,  966,    0,
      952,  953,  962,  963,  964,  954,  959,  960,  965,  962,
      963,  964,  967,  966,  968,  965,  969,  970,  966,    0,

      964,  968, 1027,  969,    0,  966,  967,    0, 1030,  962,
      963,  964,  967,    0,  971,  965,  969,  970, 1031,  967,
      966,  968,  971,  969,  970,  966,  972,  974,  972, 1027,
      969,  973,  975,  967,  971, 1030,  977,  976,  973,  967,
      976,  971,  974,  969,  970, 1031, 1034,  974,  972,  971,
      979,  973,  975,  972,  974,  972,  977,    0,  973,  975,
      976,  971,  980,  977,  976,  973,  978,  976,  978,  974,
      979,  981,  982, 1034,  974,  972,  983,  979,  973,  975,
     1035,  984,  980,  977,  986,  985,  987,  976,  978,  980,
      984,  981,  982,  978,  988,  978,  983,  979,  981,  982,

      985,  984,  989,  983,  986,  985,  987, 1035,  984,  980,
      990,  986,  985,  987,  988,  978,  992,  984,  981,  982,
      993,  988,  989,  983,  993,  991,  994,  985,  984,  989,
      990,  986,  985,  987,  995,  996,  992,  990,  991,    0,
     1040,  988,    0,  992,  993,  991,  994,  993,  995,  989,
      999,  993,  991,  994,  995,  996,  998,  990, 1001,  997,
      998,  995,  996,  992, 1041,  991,  997, 1040, 1002, 1000,
      999,  993,  991,  994, 1003,  995,    0,  999, 1001,  997,
      998,  995,  996,  998, 1000, 1001,  997,  998, 1002, 1000,
     1004, 1041, 1004,  997, 1003, 1002, 1000,  999, 1005,    0,

     1005, 1003,    0, 1008, 1006, 1001,  997,  998, 1007, 1010,
     1044, 1000, 1004,    0,    0, 1002, 1000, 1004, 1006, 1004,
     1005, 1003, 1007, 1008, 1006, 1005, 1011, 1005, 1007, 1010,
     1008, 1006, 1009, 1011, 1012, 1007, 1010, 1044, 1013, 1004,
     1014, 1009, 1013,    0, 1014, 1006, 1011, 1005,    0, 1007,
     1008, 1006, 1009, 1011, 1012, 1007, 1010, 1017, 1045, 1009,
     1011, 1012, 1013, 1016, 1014, 1013, 1018, 1014, 1009, 1013,
     1015, 1014, 1015, 1011, 1019, 1020,    0, 1017, 1016, 1009,
        0, 1012, 1048, 1016, 1017, 1045, 1018, 1021, 1049, 1013,
     1016, 1014, 1015, 1018, 1019, 1020, 1022, 1015, 1052, 1015,

     1021, 1019, 1020, 1022, 1017, 1016, 1054, 1021, 1055, 1048,
     1016, 1056, 1057, 1018, 1021, 1049, 1022, 1061,    0, 1015,
     1062, 1019, 1020, 1022,    0, 1052, 1063, 1021, 1064, 1065,
     1022, 1066, 1067, 1054, 1021, 1055,    0, 1061, 1056, 1057,
     1062, 1068, 1069, 1022, 1061, 1068, 1063, 1062, 1064, 1065,
     1070, 1066, 1067, 1063, 1071, 1064, 1065,    0, 1066, 1067,
     1073, 1098, 1069, 1074, 1061, 1068,    0, 1062, 1068, 1069,
     1070, 1072, 1068, 1063, 1071, 1064, 1065, 1070, 1066, 1067,
     1073, 1071, 1075, 1074, 1076, 1079, 1072, 1073, 1098, 1069,
     1074, 1072, 1068, 1077, 1080, 1077, 1078, 1070, 1072,    0,

     1100, 1071, 1075, 1078, 1076, 1079, 1081, 1073, 1082, 1075,
     1074, 1076, 1079, 1072, 1080, 1077, 1078, 1083, 1072, 1081,
     1077, 1080, 1077, 1078, 1103, 1084, 1081, 1100, 1082, 1075,
     1078, 1076, 1079, 1081, 1085, 1082, 1106, 1083, 1087, 1088,
        0, 1080, 1077, 1078, 1083, 1084, 1081, 1089, 1090, 1085,
     1086, 1103, 1084, 1081, 1085, 1082, 1086,    0, 1087, 1088,
     1091, 1085, 1089, 1106, 1083, 1087, 1088, 1089, 1090, 1110,
     1086, 1092, 1084, 1091, 1089, 1090, 1085, 1086, 1111, 1092,
     1091, 1085, 1094, 1086, 1093, 1087, 1088, 1091, 1095, 1089,
     1096, 1092, 1112, 1116, 1089, 1090, 1110, 1086, 1092, 1093,

     1091, 1115, 1094, 1118, 1093, 1111, 1092, 1091, 1095, 1094,
     1096, 1093, 1117, 1116, 1115, 1095, 1119, 1096, 1092, 1112,
     1116, 1115, 1121, 1118, 1122, 1124, 1093, 1117, 1115, 1094,
     1118, 1093, 1117,    0,    0, 1095, 1119, 1096, 1120, 1117,
     1116, 1115, 1121, 1119, 1122, 1124, 1125, 1123, 1115, 1121,
     1118, 1122, 1124, 1120, 1117, 1126, 1127, 1128, 1120, 1117,
     1123, 1130, 1133, 1119, 1135, 1120, 1125, 1123, 1128, 1121,
     1138, 1122, 1124, 1125, 1123, 1126, 1127, 1128,    0,    0,
     1120, 1130, 1126, 1127, 1128, 1120, 1129, 1123, 1130, 1133,
     1129, 1135, 1141, 1125, 1123, 1128,    0, 1138, 1140, 1140,

     1142, 1143, 1126, 1127, 1128, 1144, 1129,    0, 1130, 1145,
     1151, 1158, 1141, 1129, 1146, 1143,    0, 1129,    0, 1141,
     1142, 1143,    0, 1140, 1146, 1144, 1154, 1142, 1143, 1145,
     1148, 1148, 1144, 1129, 1146, 1155, 1145, 1151, 1158, 1141,
     1156, 1146, 1143, 1140, 1153, 1153, 1154, 1142, 1143, 1156,
     1140, 1146, 1144, 1154, 1161, 1155, 1145, 1162, 1164,    0,
     1156, 1146, 1155, 1166, 1168, 1170, 1172, 1156, 1174, 1176,
     1140, 1178, 1148, 1154, 1180, 1182, 1156, 1162,    0,    0,
        0, 1161, 1155,    0, 1162, 1164, 1153, 1156,    0,    0,
     1166, 1168, 1170, 1172,    0, 1174, 1176,    0, 1178, 1148,

        0, 1180, 1182,    0, 1162,    0,    0,    0,    0,    0,
        0,    0,    0, 1153, 1194, 1194, 1194, 1194, 1194, 1195,
        0,    0, 1195, 1195, 1197, 1197, 1197,    0, 1197, 1198,
        0, 1198, 1198, 1198, 1199,    0, 1199, 1199, 1199, 1200,
        0, 1200, 1200, 1200, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,

     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;


/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1923 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * _out_str ,yyscan_t yyscanner );

			int hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int _line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int _column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 2211 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1194 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1193 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(USE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(CHARACTER_VARYING)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 153:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 160:
#line 226 "flex_lexer.l"
case 161:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
{
  yylval->fval = atof(yytext);
  return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 162:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
{
  yylval->ival = LLONG_MIN;
  return SQL_INTVAL;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 241 "flex_lexer.l"
{
  errno = 0;
  yylval->ival = strtoll(yytext, nullptr, 0);
  if (errno) {
    return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
    return 0;
  }
  return SQL_INTVAL;
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 251 "flex_lexer.l"
{
  // Crop the leading and trailing quote char
  yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 257 "flex_lexer.l"
{
  yylval->sval = strdup(yytext);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 262 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 263 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 264 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 265 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 266 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 268 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 270 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3151 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1194 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1194 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
	yy_is_jam = (yy_current_state == 1193);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc((yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void hsql_set_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 270 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

